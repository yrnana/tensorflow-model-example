{"version":3,"file":"graph_model.6c4c3382.js","sources":["../../node_modules/@tensorflow/tfjs-converter/dist/data/compiled_api.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/register.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/utils.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/arithmetic.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/basic_math.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/control.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/convolution.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/creation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/dynamic.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/evaluation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/graph.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/hash_table.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/image.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/logical.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/matrices.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/normalization.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/reduction.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/slice_join.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/sparse.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/spectral.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/string.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/op_list/transformation.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_mapper.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/custom_op/node_value_impl.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/arithmetic_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/basic_math_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/control_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/convolution_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/creation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/dynamic_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/evaluation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/graph_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/hash_table.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/hash_table_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/image_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/logical_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/matrices_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/normalization_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/reduction_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/slice_join_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/sparse_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/spectral_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/string_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/executors/transformation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/operations/operation_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/execution_context.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_executor.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js","../../node_modules/@tensorflow/tfjs-converter/dist/executor/graph_model.js"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/** DataType enum. */\nexport var DataType;\n(function (DataType) {\n    DataType[DataType[\"DT_INVALID\"] = 0] = \"DT_INVALID\";\n    DataType[DataType[\"DT_FLOAT\"] = 1] = \"DT_FLOAT\";\n    DataType[DataType[\"DT_DOUBLE\"] = 2] = \"DT_DOUBLE\";\n    DataType[DataType[\"DT_INT32\"] = 3] = \"DT_INT32\";\n    DataType[DataType[\"DT_UINT8\"] = 4] = \"DT_UINT8\";\n    DataType[DataType[\"DT_INT16\"] = 5] = \"DT_INT16\";\n    DataType[DataType[\"DT_INT8\"] = 6] = \"DT_INT8\";\n    DataType[DataType[\"DT_STRING\"] = 7] = \"DT_STRING\";\n    DataType[DataType[\"DT_COMPLEX64\"] = 8] = \"DT_COMPLEX64\";\n    DataType[DataType[\"DT_INT64\"] = 9] = \"DT_INT64\";\n    DataType[DataType[\"DT_BOOL\"] = 10] = \"DT_BOOL\";\n    DataType[DataType[\"DT_QINT8\"] = 11] = \"DT_QINT8\";\n    DataType[DataType[\"DT_QUINT8\"] = 12] = \"DT_QUINT8\";\n    DataType[DataType[\"DT_QINT32\"] = 13] = \"DT_QINT32\";\n    DataType[DataType[\"DT_BFLOAT16\"] = 14] = \"DT_BFLOAT16\";\n    DataType[DataType[\"DT_FLOAT_REF\"] = 101] = \"DT_FLOAT_REF\";\n    DataType[DataType[\"DT_DOUBLE_REF\"] = 102] = \"DT_DOUBLE_REF\";\n    DataType[DataType[\"DT_INT32_REF\"] = 103] = \"DT_INT32_REF\";\n    DataType[DataType[\"DT_UINT8_REF\"] = 104] = \"DT_UINT8_REF\";\n    DataType[DataType[\"DT_INT16_REF\"] = 105] = \"DT_INT16_REF\";\n    DataType[DataType[\"DT_INT8_REF\"] = 106] = \"DT_INT8_REF\";\n    DataType[DataType[\"DT_STRING_REF\"] = 107] = \"DT_STRING_REF\";\n    DataType[DataType[\"DT_COMPLEX64_REF\"] = 108] = \"DT_COMPLEX64_REF\";\n    DataType[DataType[\"DT_INT64_REF\"] = 109] = \"DT_INT64_REF\";\n    DataType[DataType[\"DT_BOOL_REF\"] = 110] = \"DT_BOOL_REF\";\n    DataType[DataType[\"DT_QINT8_REF\"] = 111] = \"DT_QINT8_REF\";\n    DataType[DataType[\"DT_QUINT8_REF\"] = 112] = \"DT_QUINT8_REF\";\n    DataType[DataType[\"DT_QINT32_REF\"] = 113] = \"DT_QINT32_REF\";\n    DataType[DataType[\"DT_BFLOAT16_REF\"] = 114] = \"DT_BFLOAT16_REF\";\n})(DataType || (DataType = {}));\nexport var SaverDef;\n(function (SaverDef) {\n    /** CheckpointFormatVersion enum. */\n    let CheckpointFormatVersion;\n    (function (CheckpointFormatVersion) {\n        CheckpointFormatVersion[CheckpointFormatVersion[\"LEGACY\"] = 0] = \"LEGACY\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V1\"] = 1] = \"V1\";\n        CheckpointFormatVersion[CheckpointFormatVersion[\"V2\"] = 2] = \"V2\";\n    })(CheckpointFormatVersion = SaverDef.CheckpointFormatVersion || (SaverDef.CheckpointFormatVersion = {}));\n})(SaverDef || (SaverDef = {}));\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst CUSTOM_OPS = {};\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function registerOp(name, opFunc) {\n    const opMapper = {\n        tfOpName: name,\n        category: 'custom',\n        inputs: [],\n        attrs: [],\n        customExecutor: opFunc\n    };\n    CUSTOM_OPS[name] = opMapper;\n}\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function getRegisteredOp(name) {\n    return CUSTOM_OPS[name];\n}\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n *\n * @doc {heading: 'Models', subheading: 'Op Registry'}\n */\nexport function deregisterOp(name) {\n    delete CUSTOM_OPS[name];\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9jdXN0b21fb3AvcmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxVQUFVLEdBQThCLEVBQUUsQ0FBQztBQUVqRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBd0JHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxJQUFZLEVBQUUsTUFBa0I7SUFDekQsTUFBTSxRQUFRLEdBQWE7UUFDekIsUUFBUSxFQUFFLElBQUk7UUFDZCxRQUFRLEVBQUUsUUFBUTtRQUNsQixNQUFNLEVBQUUsRUFBRTtRQUNWLEtBQUssRUFBRSxFQUFFO1FBQ1QsY0FBYyxFQUFFLE1BQU07S0FDdkIsQ0FBQztJQUVGLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUM7QUFDOUIsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsSUFBWTtJQUMxQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFZO0lBQ3ZDLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcEV4ZWN1dG9yLCBPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5jb25zdCBDVVNUT01fT1BTOiB7W2tleTogc3RyaW5nXTogT3BNYXBwZXJ9ID0ge307XG5cbi8qKlxuICogUmVnaXN0ZXIgYW4gT3AgZm9yIGdyYXBoIG1vZGVsIGV4ZWN1dG9yLiBUaGlzIGFsbG93IHlvdSB0byByZWdpc3RlclxuICogVGVuc29yRmxvdyBjdXN0b20gb3Agb3Igb3ZlcnJpZGUgZXhpc3Rpbmcgb3AuXG4gKlxuICogSGVyZSBpcyBhbiBleGFtcGxlIG9mIHJlZ2lzdGVyaW5nIGEgbmV3IE1hdE11bCBPcC5cbiAqIGBgYGpzXG4gKiBjb25zdCBjdXN0b21NYXRtdWwgPSAobm9kZSkgPT5cbiAqICAgIHRmLm1hdE11bChcbiAqICAgICAgICBub2RlLmlucHV0c1swXSwgbm9kZS5pbnB1dHNbMV0sXG4gKiAgICAgICAgbm9kZS5hdHRyc1sndHJhbnNwb3NlX2EnXSwgbm9kZS5hdHRyc1sndHJhbnNwb3NlX2InXSk7XG4gKlxuICogdGYucmVnaXN0ZXJPcCgnTWF0TXVsJywgY3VzdG9tTWF0bXVsKTtcbiAqIGBgYFxuICogVGhlIGlucHV0cyBhbmQgYXR0cnMgb2YgdGhlIG5vZGUgb2JqZWN0IGlzIGJhc2VkIG9uIHRoZSBUZW5zb3JGbG93IG9wXG4gKiByZWdpc3RyeS5cbiAqXG4gKiBAcGFyYW0gbmFtZSBUaGUgVGVuc29yZmxvdyBPcCBuYW1lLlxuICogQHBhcmFtIG9wRnVuYyBBbiBvcCBmdW5jdGlvbiB3aGljaCBpcyBjYWxsZWQgd2l0aCB0aGUgY3VycmVudCBncmFwaCBub2RlXG4gKiBkdXJpbmcgZXhlY3V0aW9uIGFuZCBuZWVkcyB0byByZXR1cm4gYSB0ZW5zb3Igb3IgYSBsaXN0IG9mIHRlbnNvcnMuIFRoZSBub2RlXG4gKiBoYXMgdGhlIGZvbGxvd2luZyBhdHRyaWJ1dGVzOlxuICogICAgLSBhdHRyOiBBIG1hcCBmcm9tIGF0dHJpYnV0ZSBuYW1lIHRvIGl0cyB2YWx1ZVxuICogICAgLSBpbnB1dHM6IEEgbGlzdCBvZiBpbnB1dCB0ZW5zb3JzXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ01vZGVscycsIHN1YmhlYWRpbmc6ICdPcCBSZWdpc3RyeSd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlck9wKG5hbWU6IHN0cmluZywgb3BGdW5jOiBPcEV4ZWN1dG9yKSB7XG4gIGNvbnN0IG9wTWFwcGVyOiBPcE1hcHBlciA9IHtcbiAgICB0Zk9wTmFtZTogbmFtZSxcbiAgICBjYXRlZ29yeTogJ2N1c3RvbScsXG4gICAgaW5wdXRzOiBbXSxcbiAgICBhdHRyczogW10sXG4gICAgY3VzdG9tRXhlY3V0b3I6IG9wRnVuY1xuICB9O1xuXG4gIENVU1RPTV9PUFNbbmFtZV0gPSBvcE1hcHBlcjtcbn1cblxuLyoqXG4gKiBSZXRyaWV2ZSB0aGUgT3BNYXBwZXIgb2JqZWN0IGZvciB0aGUgcmVnaXN0ZXJlZCBvcC5cbiAqXG4gKiBAcGFyYW0gbmFtZSBUaGUgVGVuc29yZmxvdyBPcCBuYW1lLlxuICpcbiAqIEBkb2Mge2hlYWRpbmc6ICdNb2RlbHMnLCBzdWJoZWFkaW5nOiAnT3AgUmVnaXN0cnknfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZE9wKG5hbWU6IHN0cmluZyk6IE9wTWFwcGVyIHtcbiAgcmV0dXJuIENVU1RPTV9PUFNbbmFtZV07XG59XG5cbi8qKlxuICogRGVyZWdpc3RlciB0aGUgT3AgZm9yIGdyYXBoIG1vZGVsIGV4ZWN1dG9yLlxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBUZW5zb3JmbG93IE9wIG5hbWUuXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ01vZGVscycsIHN1YmhlYWRpbmc6ICdPcCBSZWdpc3RyeSd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZXJlZ2lzdGVyT3AobmFtZTogc3RyaW5nKSB7XG4gIGRlbGV0ZSBDVVNUT01fT1BTW25hbWVdO1xufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n    const inputParam = node.inputParams[paramName];\n    if (inputParam && inputParam.inputIndexStart !== undefined) {\n        const start = inputParam.inputIndexStart;\n        const end = inputParam.inputIndexEnd === 0 ?\n            undefined :\n            (inputParam.inputIndexEnd === undefined ? start + 1 :\n                inputParam.inputIndexEnd);\n        if (inputParam.type === 'tensor') {\n            return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);\n        }\n        if (inputParam.type === 'tensors') {\n            const inputs = node.inputNames.slice(start, end);\n            return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));\n        }\n        const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n        const data = tensor.dataSync();\n        return inputParam.type === 'number' ?\n            data[0] :\n            util.toNestedArray(tensor.shape, data);\n    }\n    const attrParam = node.attrParams[paramName];\n    return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n    const [nodeName, index] = parseNodeName(name);\n    if (resourceManager != null) {\n        const tensor = resourceManager.getHashTableHandleByName(nodeName);\n        if (tensor != null) {\n            return tensor;\n        }\n    }\n    const contextId = context.currentContextIds.find(contextId => {\n        return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n    });\n    return contextId !== undefined ?\n        tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n        undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(name, tensorsMap, context) {\n    return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(inputName, context) {\n    const [nodeName, index, outputName] = parseNodeName(inputName);\n    return [\n        getNodeNameWithContextId(nodeName, context && context.currentContextId),\n        index, outputName\n    ];\n}\nfunction getNodeNameWithContextId(name, contextId) {\n    return !!contextId ? `${name}-${contextId}` : name;\n}\nexport function parseNodeName(name) {\n    const parts = name.split(':');\n    if (parts.length === 1) {\n        return [name, 0, undefined];\n    }\n    const nodeName = parts[0];\n    const outputName = parts.length === 3 ? parts[1] : undefined;\n    const index = Number(parts[parts.length - 1]);\n    return [nodeName, index, outputName];\n}\nexport function split(arr, size) {\n    const res = [];\n    for (let i = 0; i < arr.length; i += size) {\n        res.push(arr.slice(i, i + size));\n    }\n    return res;\n}\nexport function getPadding(node, tensorMap, context) {\n    let pad = getParamValue('pad', node, tensorMap, context);\n    if (pad === 'explicit') {\n        // This is 1d array, we need to convert it to 2d array\n        pad = getParamValue('explicitPaddings', node, tensorMap, context);\n        const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n        for (let i = 0; i < 4; i++) {\n            explicitPadding[i][0] = pad[i * 2];\n            explicitPadding[i][1] = pad[i * 2 + 1];\n        }\n        return explicitPadding;\n    }\n    return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor) {\n    return tensor.kept ? tensor : clone(tensor);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Add\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"AddV2\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"AddN\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"BiasAdd\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sub\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"RealDiv\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Div\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"DivNoNan\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FloorDiv\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Mul\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Maximum\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Minimum\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Pow\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SquaredDifference\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Mod\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FloorMod\",\n        \"category\": \"arithmetic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJpdGhtZXRpYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvYXJpdGhtZXRpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUsS0FBSztRQUNqQixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFB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RUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtDQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtPcE1hcHBlcn0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY29uc3QganNvbjogT3BNYXBwZXJbXSA9IFtcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJBZGRcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJBZGRWMlwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJhcml0aG1ldGljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYlwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkFkZE5cIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcImVuZFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ0ZW5zb3JzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvcnNcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJCaWFzQWRkXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImFyaXRobWV0aWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiZGF0YV9mb3JtYXRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZGF0YUZvcm1hdFwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJTdWJcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJSZWFsRGl2XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImFyaXRobWV0aWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiRGl2XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImFyaXRobWV0aWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiRGl2Tm9OYW5cIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJGbG9vckRpdlwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJhcml0aG1ldGljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYlwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIk11bFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJhcml0aG1ldGljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYlwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIk1heGltdW1cIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJNaW5pbXVtXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImFyaXRobWV0aWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiUG93XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImFyaXRobWV0aWNcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiYVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJiXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3F1YXJlZERpZmZlcmVuY2VcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJNb2RcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiYXJpdGhtZXRpY1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJGbG9vck1vZFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJhcml0aG1ldGljXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYlwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Abs\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Acos\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Asin\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Atan\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Atan2\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"y\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Ceil\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ClipByValue\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"clipValueMin\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"clipValueMax\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Complex\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"real\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"imag\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ComplexAbs\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Cos\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Cosh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Elu\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Exp\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Floor\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Log\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Imag\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"outputType\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Neg\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Real\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"outputType\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Prelu\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"alpha\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Relu\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Relu6\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Selu\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sigmoid\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sin\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sinh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sqrt\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Rsqrt\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Square\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Tan\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Tanh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sign\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Round\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Expm1\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Log1p\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Reciprocal\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Softplus\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Asinh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Acosh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Atanh\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Erf\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Prod\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axes\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LeakyRelu\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"alpha\",\n                \"name\": \"alpha\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.2\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"IsNan\",\n        \"category\": \"basic_math\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"EmptyTensorList\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"maxNumElements\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LoopCond\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"pred\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Switch\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"data\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"pred\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Merge\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Enter\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"frame_name\",\n                \"name\": \"frameName\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"is_constant\",\n                \"name\": \"isConstant\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Exit\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NextIteration\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"size\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"element_shape\",\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"tfName\": \"dynamic_size\",\n                \"name\": \"dynamicSize\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"clear_after_read\",\n                \"name\": \"clearAfterRead\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"identical_element_shapes\",\n                \"name\": \"identicalElementShapes\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"tensor_array_name\",\n                \"name\": \"name\",\n                \"type\": \"string\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayWriteV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"index\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayReadV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"index\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayGatherV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"element_shape\",\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayScatterV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayConcatV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"element_shape_except0\",\n                \"name\": \"elementShapeExcept0\",\n                \"type\": \"shape\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArraySplitV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"lengths\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArraySizeV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"flowIn\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorArrayCloseV3\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorArrayId\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"StatelessIf\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"cond\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"then_branch\",\n                \"name\": \"thenBranch\",\n                \"type\": \"func\"\n            },\n            {\n                \"tfName\": \"else_branch\",\n                \"name\": \"elseBranch\",\n                \"type\": \"func\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"If\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"cond\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"then_branch\",\n                \"name\": \"thenBranch\",\n                \"type\": \"func\"\n            },\n            {\n                \"tfName\": \"else_branch\",\n                \"name\": \"elseBranch\",\n                \"type\": \"func\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"StatelessWhile\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"cond\",\n                \"name\": \"cond\",\n                \"type\": \"func\"\n            },\n            {\n                \"tfName\": \"body\",\n                \"name\": \"body\",\n                \"type\": \"func\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"While\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"cond\",\n                \"name\": \"cond\",\n                \"type\": \"func\"\n            },\n            {\n                \"tfName\": \"body\",\n                \"name\": \"body\",\n                \"type\": \"func\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListScatter\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListScatterV2\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"numElements\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListGather\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListGetItem\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"index\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListSetItem\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"index\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListReserve\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"numElements\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListFromTensor\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListStack\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"num_elements\",\n                \"name\": \"numElements\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListSplit\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"lengths\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListConcat\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_shape\",\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListPopBack\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"elementShape\",\n                \"type\": \"shape\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TensorListPushBack\",\n        \"category\": \"control\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensorListId\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"element_dtype\",\n                \"name\": \"elementDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"AvgPool\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"ksize\",\n                \"name\": \"kernelSize\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"MaxPool\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"ksize\",\n                \"name\": \"kernelSize\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": [],\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"MaxPoolWithArgmax\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"ksize\",\n                \"name\": \"kernelSize\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"include_batch_in_index\",\n                \"name\": \"includeBatchInIndex\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"AvgPool3D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"ksize\",\n                \"name\": \"kernelSize\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"MaxPool3D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"ksize\",\n                \"name\": \"kernelSize\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Conv1D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"stride\",\n                \"name\": \"stride\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NWC\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"dilation\",\n                \"name\": \"dilation\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Conv2D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"useCudnnOnGpu\",\n                \"name\": \"useCudnnOnGpu\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"_FusedConv2D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"num_args\",\n                \"name\": \"numArgs\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"use_cudnn_on_gpu\",\n                \"name\": \"useCudnnOnGpu\",\n                \"type\": \"bool\",\n                \"defaultValue\": true\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\",\n                \"defaultValue\": [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                \"tfName\": \"fused_ops\",\n                \"name\": \"fusedOps\",\n                \"type\": \"string[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"epsilon\",\n                \"name\": \"epsilon\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.0001\n            },\n            {\n                \"tfName\": \"leakyrelu_alpha\",\n                \"name\": \"leakyreluAlpha\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Conv2DBackpropInput\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 2,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 0,\n                \"name\": \"outputShape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"DepthwiseConv2d\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"input\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"DepthwiseConv2dNative\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"input\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FusedDepthwiseConv2dNative\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"num_args\",\n                \"name\": \"numArgs\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\",\n                \"defaultValue\": [\n                    1,\n                    1,\n                    1,\n                    1\n                ]\n            },\n            {\n                \"tfName\": \"fused_ops\",\n                \"name\": \"fusedOps\",\n                \"type\": \"string[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"explicit_paddings\",\n                \"name\": \"explicitPaddings\",\n                \"type\": \"number[]\",\n                \"defaultValue\": []\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Conv3D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"defaultValue\": \"NHWC\"\n            },\n            {\n                \"tfName\": \"dilations\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Dilation2D\",\n        \"category\": \"convolution\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"filter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"strides\",\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"rates\",\n                \"name\": \"dilations\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"padding\",\n                \"name\": \"pad\",\n                \"type\": \"string\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Fill\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"value\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LinSpace\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"start\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"stop\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"num\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"OneHot\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"depth\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"onValue\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            },\n            {\n                \"start\": 3,\n                \"name\": \"offValue\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"axis\",\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Ones\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"OnesLike\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"RandomUniform\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"minval\",\n                \"name\": \"minval\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"maxval\",\n                \"name\": \"maxval\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            },\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"seed\",\n                \"name\": \"seed\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"seed2\",\n                \"name\": \"seed2\",\n                \"type\": \"number\",\n                \"defaultValue\": 0,\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"T\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Range\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"start\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"stop\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"step\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"Tidx\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"TruncatedNormal\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"means\",\n                \"name\": \"mean\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"stddev\",\n                \"name\": \"stdDev\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            },\n            {\n                \"tfName\": \"seed\",\n                \"name\": \"seed\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"seed2\",\n                \"name\": \"seed2\",\n                \"type\": \"number\",\n                \"defaultValue\": 0,\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"T\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Zeros\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ZerosLike\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Multinomial\",\n        \"category\": \"creation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"logits\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"numSamples\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"seed\",\n                \"name\": \"seed\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"seed2\",\n                \"name\": \"seed2\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"output_dtype\",\n                \"name\": \"output_dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L2NyZWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxVQUFVO2FBQ25CO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2FBQ2hCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLFVBQVU7UUFDdEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxLQUFLO2dCQUNiLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztn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Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFlBQVk7Z0JBQ3BCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsT0FBTztnQkFDakIsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTzthQUNoQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE9BQU87YUFDaEI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkZpbGxcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiY3JlYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwic2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJ2YWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkxpblNwYWNlXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImNyZWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInN0YXJ0XCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcInN0b3BcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwibnVtXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiT25lSG90XCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImNyZWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImluZGljZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiZGVwdGhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwib25WYWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAzLFxuICAgICAgICBcIm5hbWVcIjogXCJvZmZWYWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMFxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJheGlzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJPbmVzXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImNyZWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInNoYXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJPbmVzTGlrZVwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJjcmVhdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIlJhbmRvbVVuaWZvcm1cIixcbiAgICBcImNhdGVnb3J5XCI6IFwiY3JlYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwic2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibWludmFsXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIm1pbnZhbFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJtYXh2YWxcIixcbiAgICAgICAgXCJuYW1lXCI6IFwibWF4dmFsXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwic2VlZFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzZWVkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiAwXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNlZWQyXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNlZWQyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiAwLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiVFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJSYW5nZVwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJjcmVhdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJzdGFydFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzdG9wXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcInN0ZXBcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXG4gICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IDBcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRpZHhcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJUcnVuY2F0ZWROb3JtYWxcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiY3JlYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwic2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibWVhbnNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwibWVhblwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJzdGRkZXZcIixcbiAgICAgICAgXCJuYW1lXCI6IFwic3RkRGV2XCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiLFxuICAgICAgICBcImRlZmF1bHRWYWx1ZVwiOiAxXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNlZWRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwic2VlZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJzZWVkMlwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzZWVkMlwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMCxcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiVFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJaZXJvc1wiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJjcmVhdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJzaGFwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiWmVyb3NMaWtlXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImNyZWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJNdWx0aW5vbWlhbFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJjcmVhdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJsb2dpdHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwibnVtU2FtcGxlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwic2VlZFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzZWVkXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNlZWQyXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNlZWQyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIlRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJvdXRwdXRfZHR5cGVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwib3V0cHV0X2R0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCJcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"NonMaxSuppressionV2\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"boxes\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scores\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"maxOutputSize\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"iouThreshold\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NonMaxSuppressionV3\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"boxes\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scores\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"maxOutputSize\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"iouThreshold\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"scoreThreshold\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NonMaxSuppressionV4\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"boxes\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scores\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"maxOutputSize\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"iouThreshold\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"scoreThreshold\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"T_threshold\",\n                \"name\": \"threshold\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"pad_to_max_output_size\",\n                \"name\": \"padToMaxOutputSize\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NonMaxSuppressionV5\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"boxes\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scores\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"maxOutputSize\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"iouThreshold\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"scoreThreshold\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 5,\n                \"name\": \"softNmsSigma\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Where\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"condition\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ListDiff\",\n        \"category\": \"dynamic\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"y\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"TopKV2\",\n        \"category\": \"evaluation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"k\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"sorted\",\n                \"name\": \"sorted\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Unique\",\n        \"category\": \"evaluation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"UniqueV2\",\n        \"category\": \"evaluation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL29wX2xpc3QvZXZhbHVhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFJSCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQWU7SUFDOUI7UUFDRSxVQUFVLEVBQUUsUUFBUTtRQUNwQixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7UUFDRCxPQUFPLEVBQUU7WUFDUDtnQkFDRSxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsUUFBUTtRQUNwQixVQUFVLEVBQUUsWUFBWTtRQUN4QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFVBQVUsRUFBRSxZQUFZO1FBQ3hCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIlRvcEtWMlwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJldmFsdWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwia1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwic29ydGVkXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNvcnRlZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiVW5pcXVlXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImV2YWx1YXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJVbmlxdWVWMlwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJldmFsdWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbiJdfQ==","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"PlaceholderWithDefault\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"default\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"shape\",\n                \"name\": \"shape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Placeholder\",\n        \"category\": \"graph\",\n        \"attrs\": [\n            {\n                \"tfName\": \"shape\",\n                \"name\": \"shape\",\n                \"type\": \"shape\"\n            },\n            {\n                \"tfName\": \"dtype\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Const\",\n        \"category\": \"graph\"\n    },\n    {\n        \"tfOpName\": \"Identity\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"IdentityN\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensors\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Snapshot\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Rank\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Size\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Shape\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ShapeN\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensors\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Print\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"data\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"message\",\n                \"name\": \"message\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"first_n\",\n                \"name\": \"firstN\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"summarize\",\n                \"name\": \"summarize\",\n                \"type\": \"number\",\n                \"defaultValue\": 3\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NoOp\",\n        \"category\": \"graph\",\n        \"inputs\": []\n    },\n    {\n        \"tfOpName\": \"StopGradient\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FakeQuantWithMinMaxVars\",\n        \"category\": \"graph\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"min\",\n                \"name\": \"min\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"max\",\n                \"name\": \"max\",\n                \"type\": \"number\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"HashTable\",\n        \"category\": \"hash_table\",\n        \"inputs\": [],\n        \"attrs\": [\n            {\n                \"tfName\": \"shared_name\",\n                \"name\": \"sharedName\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"use_node_name_sharing\",\n                \"name\": \"useNodeNameSharing\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"key_dtype\",\n                \"name\": \"keyDType\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"value_dtype\",\n                \"name\": \"valueDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"HashTableV2\",\n        \"category\": \"hash_table\",\n        \"inputs\": [],\n        \"attrs\": [\n            {\n                \"tfName\": \"shared_name\",\n                \"name\": \"sharedName\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"use_node_name_sharing\",\n                \"name\": \"useNodeNameSharing\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"key_dtype\",\n                \"name\": \"keyDType\",\n                \"type\": \"dtype\"\n            },\n            {\n                \"tfName\": \"value_dtype\",\n                \"name\": \"valueDType\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableImport\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"keys\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"values\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"Tin\",\n                \"name\": \"tIn\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"tOut\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableImportV2\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"keys\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"values\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"Tin\",\n                \"name\": \"tIn\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"tOut\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableFind\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"keys\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"defaultValue\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"Tin\",\n                \"name\": \"tIn\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"tOut\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableFindV2\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"keys\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"defaultValue\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"Tin\",\n                \"name\": \"tIn\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"Tout\",\n                \"name\": \"tOut\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableSize\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LookupTableSizeV2\",\n        \"category\": \"hash_table\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tableHandle\",\n                \"type\": \"tensor\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"ResizeBilinear\",\n        \"category\": \"image\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"images\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"size\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"align_corners\",\n                \"name\": \"alignCorners\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"half_pixel_centers\",\n                \"name\": \"halfPixelCenters\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ResizeNearestNeighbor\",\n        \"category\": \"image\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"images\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"size\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"align_corners\",\n                \"name\": \"alignCorners\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"half_pixel_centers\",\n                \"name\": \"halfPixelCenters\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"CropAndResize\",\n        \"category\": \"image\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"image\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"boxes\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"boxInd\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"cropSize\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"method\",\n                \"name\": \"method\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"extrapolation_value\",\n                \"name\": \"extrapolationValue\",\n                \"type\": \"number\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L2ltYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxnQkFBZ0I7UUFDNUIsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSx1QkFBdUI7UUFDbkMsVUFBVSxFQUFFLE9BQU87UUFDbkIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLFFBQVE7Z0JBQ2hCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxlQUFlO2dCQUN6QixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLE1BQU07YUFDZjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLE1BQU0sRUFBRSxrQkFBa0I7Z0JBQzFCLE1BQU0sRUFBRSxNQUFNO2FBQ2Y7WUFDRDtnQkFDRSxRQUFRLEVBQUUsR0FBRztnQkFDYixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsT0FBTztnQkFDZixjQUFjLEVBQUUsSUFBSTthQUNyQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxlQUFlO1FBQzNCLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFVBQVU7YUFDbkI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxRQUFRO2dCQUNsQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUscUJBQXFCO2dCQUMvQixNQUFNLEVBQUUsb0JBQW9CO2dCQUM1QixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiUmVzaXplQmlsaW5lYXJcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiaW1hZ2VcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcInNpemVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiYWxpZ25fY29ybmVyc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJhbGlnbkNvcm5lcnNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImhhbGZfcGl4ZWxfY2VudGVyc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJoYWxmUGl4ZWxDZW50ZXJzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiUmVzaXplTmVhcmVzdE5laWdoYm9yXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcImltYWdlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImltYWdlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImFsaWduX2Nvcm5lcnNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYWxpZ25Db3JuZXJzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJoYWxmX3BpeGVsX2NlbnRlcnNcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiaGFsZlBpeGVsQ2VudGVyc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiVFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkNyb3BBbmRSZXNpemVcIixcbiAgICBcImNhdGVnb3J5XCI6IFwiaW1hZ2VcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW1hZ2VcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYm94ZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwiYm94SW5kXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDMsXG4gICAgICAgIFwibmFtZVwiOiBcImNyb3BTaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIm1ldGhvZFwiLFxuICAgICAgICBcIm5hbWVcIjogXCJtZXRob2RcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwiZXh0cmFwb2xhdGlvbl92YWx1ZVwiLFxuICAgICAgICBcIm5hbWVcIjogXCJleHRyYXBvbGF0aW9uVmFsdWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Equal\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"NotEqual\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Greater\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"GreaterEqual\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Less\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LessEqual\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LogicalAnd\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LogicalNot\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LogicalOr\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Select\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"condition\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SelectV2\",\n        \"category\": \"logical\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"condition\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"_FusedMatMul\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"end\": 0,\n                \"name\": \"args\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"num_args\",\n                \"name\": \"numArgs\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"fused_ops\",\n                \"name\": \"fusedOps\",\n                \"type\": \"string[]\",\n                \"defaultValue\": []\n            },\n            {\n                \"tfName\": \"epsilon\",\n                \"name\": \"epsilon\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.0001\n            },\n            {\n                \"tfName\": \"transpose_a\",\n                \"name\": \"transposeA\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"transpose_b\",\n                \"name\": \"transposeB\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"MatMul\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"transpose_a\",\n                \"name\": \"transposeA\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"transpose_b\",\n                \"name\": \"transposeB\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"BatchMatMul\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"adj_x\",\n                \"name\": \"transposeA\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"adj_y\",\n                \"name\": \"transposeB\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"BatchMatMulV2\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"a\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"b\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"adj_x\",\n                \"name\": \"transposeA\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"adj_y\",\n                \"name\": \"transposeB\",\n                \"type\": \"bool\",\n                \"defaultValue\": false\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Transpose\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"perm\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Einsum\",\n        \"category\": \"matrices\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"equation\",\n                \"name\": \"equation\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"N\",\n                \"name\": \"n\",\n                \"type\": \"number\",\n                \"defaultValue\": 2\n            },\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"FusedBatchNorm\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scale\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"offset\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"mean\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"variance\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"epsilon\",\n                \"name\": \"epsilon\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.001\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FusedBatchNormV2\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scale\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"offset\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"mean\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"variance\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"epsilon\",\n                \"name\": \"epsilon\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.001\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"FusedBatchNormV3\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"scale\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"offset\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"mean\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 4,\n                \"name\": \"variance\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"epsilon\",\n                \"name\": \"epsilon\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.001\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LRN\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"depth_radius\",\n                \"name\": \"radius\",\n                \"type\": \"number\",\n                \"defaultValue\": 5\n            },\n            {\n                \"tfName\": \"bias\",\n                \"name\": \"bias\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            },\n            {\n                \"tfName\": \"alpha\",\n                \"name\": \"alpha\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            },\n            {\n                \"tfName\": \"beta\",\n                \"name\": \"beta\",\n                \"type\": \"number\",\n                \"defaultValue\": 0.5\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Softmax\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"LogSoftmax\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SparseToDense\",\n        \"category\": \"normalization\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"sparseIndices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"outputShape\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"sparseValues\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"defaultValue\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"validate_indices\",\n                \"name\": \"validateIndices\",\n                \"type\": \"bool\",\n                \"defaultValue\": true,\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Bincount\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"size\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"weights\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"DenseBincount\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"size\",\n                \"type\": \"number\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"weights\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"binary_output\",\n                \"name\": \"binaryOutput\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Max\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Mean\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Min\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Sum\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"All\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Any\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ArgMax\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ArgMin\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Prod\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"keep_dims\",\n                \"name\": \"keepDims\",\n                \"type\": \"bool\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Cumsum\",\n        \"category\": \"reduction\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"exclusive\",\n                \"name\": \"exclusive\",\n                \"type\": \"bool\"\n            },\n            {\n                \"tfName\": \"reverse\",\n                \"name\": \"reverse\",\n                \"type\": \"bool\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"ConcatV2\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": -1,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            },\n            {\n                \"start\": -1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"N\",\n                \"name\": \"n\",\n                \"type\": \"number\",\n                \"defaultValue\": 2\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Concat\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 1,\n                \"end\": 0,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            },\n            {\n                \"start\": 0,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"N\",\n                \"name\": \"n\",\n                \"type\": \"number\",\n                \"defaultValue\": 2\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"GatherV2\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"batch_dims\",\n                \"name\": \"batchDims\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Gather\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"validate_indices\",\n                \"name\": \"validateIndices\",\n                \"type\": \"bool\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Reverse\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"dims\",\n                \"type\": \"bool[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ReverseV2\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Slice\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"begin\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"size\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"StridedSlice\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"begin\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"end\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"strides\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"begin_mask\",\n                \"name\": \"beginMask\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"end_mask\",\n                \"name\": \"endMask\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"new_axis_mask\",\n                \"name\": \"newAxisMask\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"ellipsis_mask\",\n                \"name\": \"ellipsisMask\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"shrink_axis_mask\",\n                \"name\": \"shrinkAxisMask\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Pack\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"end\": 0,\n                \"name\": \"tensors\",\n                \"type\": \"tensors\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"axis\",\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Unpack\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"tensor\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"axis\",\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"tfName\": \"num\",\n                \"name\": \"num\",\n                \"type\": \"number\",\n                \"defaultValue\": 0,\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Tile\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"reps\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Split\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            },\n            {\n                \"start\": 1,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"num_split\",\n                \"name\": \"numOrSizeSplits\",\n                \"type\": \"number\",\n                \"defaultValue\": 1\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SplitV\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"numOrSizeSplits\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"axis\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ScatterNd\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"values\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"GatherNd\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SparseToDense\",\n        \"category\": \"slice_join\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"sparseIndices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"outputShape\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"sparseValues\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"defaultValue\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"validate_indices\",\n                \"name\": \"validateIndices\",\n                \"type\": \"bool\",\n                \"defaultValue\": false,\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"SparseFillEmptyRows\",\n        \"category\": \"sparse\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"values\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"denseShape\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 3,\n                \"name\": \"defaultValue\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SparseReshape\",\n        \"category\": \"sparse\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"inputIndices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"inputShape\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"newShape\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"T\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SparseSegmentMean\",\n        \"category\": \"sparse\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"data\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"segmentIds\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SparseSegmentSum\",\n        \"category\": \"sparse\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"data\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"indices\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"segmentIds\",\n                \"type\": \"tensor\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zcGFyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLHFCQUFxQjtRQUNqQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsZUFBZTtRQUMzQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsY0FBYztnQkFDdEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxHQUFHO2dCQUNiLE1BQU0sRUFBRSxPQUFPO2dCQUNmLE1BQU0sRUFBRSxPQUFPO2dCQUNmLGNBQWMsRUFBRSxJQUFJO2FBQ3JCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLG1CQUFtQjtRQUMvQixVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7SUFDRDtRQUNFLFVBQVUsRUFBRSxrQkFBa0I7UUFDOUIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsU0FBUztnQkFDakIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIlNwYXJzZUZpbGxFbXB0eVJvd3NcIixcbiAgICBcImNhdGVnb3J5XCI6IFwic3BhcnNlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImluZGljZXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwidmFsdWVzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcImRlbnNlU2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMyxcbiAgICAgICAgXCJuYW1lXCI6IFwiZGVmYXVsdFZhbHVlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIlNwYXJzZVJlc2hhcGVcIixcbiAgICBcImNhdGVnb3J5XCI6IFwic3BhcnNlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImlucHV0SW5kaWNlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJpbnB1dFNoYXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcIm5ld1NoYXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImR0eXBlXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3BhcnNlU2VnbWVudE1lYW5cIixcbiAgICBcImNhdGVnb3J5XCI6IFwic3BhcnNlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5kaWNlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJzZWdtZW50SWRzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIlNwYXJzZVNlZ21lbnRTdW1cIixcbiAgICBcImNhdGVnb3J5XCI6IFwic3BhcnNlXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcImRhdGFcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5kaWNlc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJzZWdtZW50SWRzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"FFT\",\n        \"category\": \"spectral\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"IFFT\",\n        \"category\": \"spectral\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"RFFT\",\n        \"category\": \"spectral\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"fft_length\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"IRFFT\",\n        \"category\": \"spectral\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"fft_length\",\n                \"type\": \"number\",\n                \"notSupported\": true\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L3NwZWN0cmFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxLQUFLO1FBQ2pCLFVBQVUsRUFBRSxVQUFVO1FBQ3RCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1NBQ0Y7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLE1BQU07UUFDbEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsTUFBTTtRQUNsQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsT0FBTztRQUNuQixVQUFVLEVBQUUsVUFBVTtRQUN0QixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsR0FBRztnQkFDWCxNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsY0FBYyxFQUFFLElBQUk7YUFDckI7U0FDRjtLQUNGO0NBQ0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge09wTWFwcGVyfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjb25zdCBqc29uOiBPcE1hcHBlcltdID0gW1xuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkZGVFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzcGVjdHJhbFwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIklGRlRcIixcbiAgICBcImNhdGVnb3J5XCI6IFwic3BlY3RyYWxcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJSRkZUXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInNwZWN0cmFsXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiZmZ0X2xlbmd0aFwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJub3RTdXBwb3J0ZWRcIjogdHJ1ZVxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJJUkZGVFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzcGVjdHJhbFwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImZmdF9sZW5ndGhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXG4gICAgICAgIFwibm90U3VwcG9ydGVkXCI6IHRydWVcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"StringNGrams\",\n        \"category\": \"string\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"data\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"dataSplits\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"separator\",\n                \"name\": \"separator\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"ngram_widths\",\n                \"name\": \"nGramWidths\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"tfName\": \"left_pad\",\n                \"name\": \"leftPad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"right_pad\",\n                \"name\": \"rightPad\",\n                \"type\": \"string\"\n            },\n            {\n                \"tfName\": \"pad_width\",\n                \"name\": \"padWidth\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"preserve_short_sequences\",\n                \"name\": \"preserveShortSequences\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"outputs\": [\n            \"ngrams\",\n            \"ngrams_splits\"\n        ]\n    },\n    {\n        \"tfOpName\": \"StringSplit\",\n        \"category\": \"string\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"input\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"delimiter\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"skip_empty\",\n                \"name\": \"skipEmpty\",\n                \"type\": \"bool\"\n            }\n        ],\n        \"outputs\": [\n            \"indices\",\n            \"values\",\n            \"shape\"\n        ]\n    },\n    {\n        \"tfOpName\": \"StringToHashBucketFast\",\n        \"category\": \"string\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"input\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"num_buckets\",\n                \"name\": \"numBuckets\",\n                \"type\": \"number\"\n            }\n        ]\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvb3BfbGlzdC9zdHJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0E7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBSUgsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFlO0lBQzlCO1FBQ0UsVUFBVSxFQUFFLGNBQWM7UUFDMUIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsWUFBWTtnQkFDcEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsY0FBYztnQkFDeEIsTUFBTSxFQUFFLGFBQWE7Z0JBQ3JCLE1BQU0sRUFBRSxVQUFVO2FBQ25CO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLFVBQVU7Z0JBQ3BCLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixNQUFNLEVBQUUsUUFBUTthQUNqQjtZQUNEO2dCQUNFLFFBQVEsRUFBRSxXQUFXO2dCQUNyQixNQUFNLEVBQUUsVUFBVTtnQkFDbEIsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsV0FBVztnQkFDckIsTUFBTSxFQUFFLFVBQVU7Z0JBQ2xCLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsTUFBTSxFQUFFLHdCQUF3QjtnQkFDaEMsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsUUFBUTtZQUNSLGVBQWU7U0FDaEI7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLGFBQWE7UUFDekIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLFFBQVE7YUFDakI7WUFDRDtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixNQUFNLEVBQUUsV0FBVztnQkFDbkIsTUFBTSxFQUFFLE1BQU07YUFDZjtTQUNGO1FBQ0QsU0FBUyxFQUFFO1lBQ1QsU0FBUztZQUNULFFBQVE7WUFDUixPQUFPO1NBQ1I7S0FDRjtJQUNEO1FBQ0UsVUFBVSxFQUFFLHdCQUF3QjtRQUNwQyxVQUFVLEVBQUUsUUFBUTtRQUNwQixRQUFRLEVBQUU7WUFDUjtnQkFDRSxPQUFPLEVBQUUsQ0FBQztnQkFDVixNQUFNLEVBQUUsT0FBTztnQkFDZixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO1FBQ0QsT0FBTyxFQUFFO1lBQ1A7Z0JBQ0UsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLE1BQU0sRUFBRSxZQUFZO2dCQUNwQixNQUFNLEVBQUUsUUFBUTthQUNqQjtTQUNGO0tBQ0Y7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3RyaW5nTkdyYW1zXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInN0cmluZ1wiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJkYXRhXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImRhdGFTcGxpdHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInNlcGFyYXRvclwiLFxuICAgICAgICBcIm5hbWVcIjogXCJzZXBhcmF0b3JcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibmdyYW1fd2lkdGhzXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIm5HcmFtV2lkdGhzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwibGVmdF9wYWRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwibGVmdFBhZFwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJyaWdodF9wYWRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwicmlnaHRQYWRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwidGZOYW1lXCI6IFwicGFkX3dpZHRoXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInBhZFdpZHRoXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcInByZXNlcnZlX3Nob3J0X3NlcXVlbmNlc1wiLFxuICAgICAgICBcIm5hbWVcIjogXCJwcmVzZXJ2ZVNob3J0U2VxdWVuY2VzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcImJvb2xcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJvdXRwdXRzXCI6IFtcbiAgICAgIFwibmdyYW1zXCIsXG4gICAgICBcIm5ncmFtc19zcGxpdHNcIlxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJTdHJpbmdTcGxpdFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzdHJpbmdcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5wdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiZGVsaW1pdGVyXCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJza2lwX2VtcHR5XCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNraXBFbXB0eVwiLFxuICAgICAgICBcInR5cGVcIjogXCJib29sXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwib3V0cHV0c1wiOiBbXG4gICAgICBcImluZGljZXNcIixcbiAgICAgIFwidmFsdWVzXCIsXG4gICAgICBcInNoYXBlXCJcbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiU3RyaW5nVG9IYXNoQnVja2V0RmFzdFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJzdHJpbmdcIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwiaW5wdXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIm51bV9idWNrZXRzXCIsXG4gICAgICAgIFwibmFtZVwiOiBcIm51bUJ1Y2tldHNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCJcbiAgICAgIH1cbiAgICBdXG4gIH1cbl07XG4iXX0=","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const json = [\n    {\n        \"tfOpName\": \"Cast\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"SrcT\",\n                \"name\": \"sdtype\",\n                \"type\": \"dtype\",\n                \"notSupported\": true\n            },\n            {\n                \"tfName\": \"DstT\",\n                \"name\": \"dtype\",\n                \"type\": \"dtype\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"ExpandDims\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"axis\",\n                \"type\": \"number\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"MirrorPad\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"padding\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"mode\",\n                \"name\": \"mode\",\n                \"type\": \"string\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Pad\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"padding\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"constant_value\",\n                \"name\": \"constantValue\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"PadV2\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"padding\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"constantValue\",\n                \"type\": \"number\",\n                \"defaultValue\": 0\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Reshape\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"Squeeze\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"axis\",\n                \"tfDeprecatedName\": \"squeeze_dims\",\n                \"name\": \"axis\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"SpaceToBatchND\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"blockShape\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"paddings\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"BatchToSpaceND\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"blockShape\",\n                \"type\": \"number[]\"\n            },\n            {\n                \"start\": 2,\n                \"name\": \"crops\",\n                \"type\": \"number[]\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"DepthToSpace\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": [\n            {\n                \"tfName\": \"block_size\",\n                \"name\": \"blockSize\",\n                \"type\": \"number\"\n            },\n            {\n                \"tfName\": \"data_format\",\n                \"name\": \"dataFormat\",\n                \"type\": \"string\"\n            }\n        ]\n    },\n    {\n        \"tfOpName\": \"BroadcastTo\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"x\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"shape\",\n                \"type\": \"number[]\"\n            }\n        ],\n        \"attrs\": []\n    },\n    {\n        \"tfOpName\": \"BroadcastArgs\",\n        \"category\": \"transformation\",\n        \"inputs\": [\n            {\n                \"start\": 0,\n                \"name\": \"s0\",\n                \"type\": \"tensor\"\n            },\n            {\n                \"start\": 1,\n                \"name\": \"s1\",\n                \"type\": \"tensor\"\n            }\n        ],\n        \"attrs\": []\n    }\n];\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNmb3JtYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9vcF9saXN0L3RyYW5zZm9ybWF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUlILE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBZTtJQUM5QjtRQUNFLFVBQVUsRUFBRSxNQUFNO1FBQ2xCLFVBQVUsRUFBRSxnQkFBZ0I7UUFDNUIsUUFBUSxFQUFFO1lBQ1I7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLEdBQUc7Z0JBQ1gsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRTtZQUNQO2dCQUNFLFFBQVEsRUFBRSxNQUFNO2dCQUNoQixNQUFNLEVBQUUsUUFBUTtnQkFDaEIsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsY0FBYyxFQUFFLElBQUk7YUFDckI7WUFDRDtnQkFDRSxRQUFRLEVBQUUsTUFBTTtnQkFDaEIsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsTUFBTSxFQUFFLE9BQU87YUFDaEI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsWUFBWTtRQUN4QixVQUFVLEVBQUUsZ0JBQWdCO1FBQzVCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dCQUNYLE1BQU0sRUFBRSxRQUFRO2FBQ2pCO1lBQ0Q7Z0JBQ0UsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtLQUNGO0lBQ0Q7UUFDRSxVQUFVLEVBQUUsV0FBVztRQUN2QixVQUFVLEVBQUUsZ0JBQWdCO1FBQzVCLFFBQVEsRUFBRTtZQUNSO2dCQUNFLE9BQU8sRUFBRSxDQUFDO2dCQUNWLE1BQU0sRUFBRSxHQUFHO2dC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QUk7Z0JBQ1osTUFBTSxFQUFFLFFBQVE7YUFDakI7U0FDRjtRQUNELE9BQU8sRUFBRSxFQUFFO0tBQ1o7Q0FDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7T3BNYXBwZXJ9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IGpzb246IE9wTWFwcGVyW10gPSBbXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQ2FzdFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJ0cmFuc2Zvcm1hdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJ0Zk5hbWVcIjogXCJTcmNUXCIsXG4gICAgICAgIFwibmFtZVwiOiBcInNkdHlwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJkdHlwZVwiLFxuICAgICAgICBcIm5vdFN1cHBvcnRlZFwiOiB0cnVlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIkRzdFRcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiZHR5cGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwiZHR5cGVcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJFeHBhbmREaW1zXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInRyYW5zZm9ybWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYXhpc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJNaXJyb3JQYWRcIixcbiAgICBcImNhdGVnb3J5XCI6IFwidHJhbnNmb3JtYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJwYWRkaW5nXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcIm1vZGVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwibW9kZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJQYWRcIixcbiAgICBcImNhdGVnb3J5XCI6IFwidHJhbnNmb3JtYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJwYWRkaW5nXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImNvbnN0YW50X3ZhbHVlXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImNvbnN0YW50VmFsdWVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXG4gICAgICAgIFwiZGVmYXVsdFZhbHVlXCI6IDBcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiUGFkVjJcIixcbiAgICBcImNhdGVnb3J5XCI6IFwidHJhbnNmb3JtYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJwYWRkaW5nXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMixcbiAgICAgICAgXCJuYW1lXCI6IFwiY29uc3RhbnRWYWx1ZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJcIixcbiAgICAgICAgXCJkZWZhdWx0VmFsdWVcIjogMFxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJSZXNoYXBlXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInRyYW5zZm9ybWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwic2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJTcXVlZXplXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInRyYW5zZm9ybWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0ZkRlcHJlY2F0ZWROYW1lXCI6IFwic3F1ZWV6ZV9kaW1zXCIsXG4gICAgICAgIFwibmFtZVwiOiBcImF4aXNcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfVxuICAgIF1cbiAgfSxcbiAge1xuICAgIFwidGZPcE5hbWVcIjogXCJTcGFjZVRvQmF0Y2hORFwiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJ0cmFuc2Zvcm1hdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJ4XCIsXG4gICAgICAgIFwidHlwZVwiOiBcInRlbnNvclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDEsXG4gICAgICAgIFwibmFtZVwiOiBcImJsb2NrU2hhcGVcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyW11cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAyLFxuICAgICAgICBcIm5hbWVcIjogXCJwYWRkaW5nc1wiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXVxuICB9LFxuICB7XG4gICAgXCJ0Zk9wTmFtZVwiOiBcIkJhdGNoVG9TcGFjZU5EXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInRyYW5zZm9ybWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMSxcbiAgICAgICAgXCJuYW1lXCI6IFwiYmxvY2tTaGFwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDIsXG4gICAgICAgIFwibmFtZVwiOiBcImNyb3BzXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlcltdXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiRGVwdGhUb1NwYWNlXCIsXG4gICAgXCJjYXRlZ29yeVwiOiBcInRyYW5zZm9ybWF0aW9uXCIsXG4gICAgXCJpbnB1dHNcIjogW1xuICAgICAge1xuICAgICAgICBcInN0YXJ0XCI6IDAsXG4gICAgICAgIFwibmFtZVwiOiBcInhcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwidGVuc29yXCJcbiAgICAgIH1cbiAgICBdLFxuICAgIFwiYXR0cnNcIjogW1xuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImJsb2NrX3NpemVcIixcbiAgICAgICAgXCJuYW1lXCI6IFwiYmxvY2tTaXplXCIsXG4gICAgICAgIFwidHlwZVwiOiBcIm51bWJlclwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcInRmTmFtZVwiOiBcImRhdGFfZm9ybWF0XCIsXG4gICAgICAgIFwibmFtZVwiOiBcImRhdGFGb3JtYXRcIixcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQnJvYWRjYXN0VG9cIixcbiAgICBcImNhdGVnb3J5XCI6IFwidHJhbnNmb3JtYXRpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XG4gICAgICAgIFwic3RhcnRcIjogMCxcbiAgICAgICAgXCJuYW1lXCI6IFwieFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzaGFwZVwiLFxuICAgICAgICBcInR5cGVcIjogXCJudW1iZXJbXVwiXG4gICAgICB9XG4gICAgXSxcbiAgICBcImF0dHJzXCI6IFtdXG4gIH0sXG4gIHtcbiAgICBcInRmT3BOYW1lXCI6IFwiQnJvYWRjYXN0QXJnc1wiLFxuICAgIFwiY2F0ZWdvcnlcIjogXCJ0cmFuc2Zvcm1hdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAwLFxuICAgICAgICBcIm5hbWVcIjogXCJzMFwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJzdGFydFwiOiAxLFxuICAgICAgICBcIm5hbWVcIjogXCJzMVwiLFxuICAgICAgICBcInR5cGVcIjogXCJ0ZW5zb3JcIlxuICAgICAgfVxuICAgIF0sXG4gICAgXCJhdHRyc1wiOiBbXVxuICB9XG5dO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport { getRegisteredOp } from './custom_op/register';\nimport { getNodeNameAndIndex } from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as hashTable from './op_list/hash_table';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as sparse from './op_list/sparse';\nimport * as spectral from './op_list/spectral';\nimport * as string from './op_list/string';\nimport * as transformation from './op_list/transformation';\nexport class OperationMapper {\n    // Singleton instance for the mapper\n    static get Instance() {\n        return this._instance || (this._instance = new this());\n    }\n    // Loads the op mapping from the JSON file.\n    constructor() {\n        const ops = [\n            arithmetic, basicMath, control, convolution, creation, dynamic,\n            evaluation, graph, hashTable, image, logical, matrices, normalization,\n            reduction, sliceJoin, sparse, spectral, string, transformation\n        ];\n        const mappersJson = [].concat(...ops.map(op => op.json));\n        this.opMappers = mappersJson.reduce((map, mapper) => {\n            map[mapper.tfOpName] = mapper;\n            return map;\n        }, {});\n    }\n    // Converts the model inference graph from Tensorflow GraphDef to local\n    // representation for TensorFlow.js API\n    transformGraph(graph, signature = {}) {\n        const tfNodes = graph.node;\n        const placeholders = [];\n        const weights = [];\n        const initNodes = [];\n        const nodes = tfNodes.reduce((map, node) => {\n            map[node.name] = this.mapNode(node);\n            if (node.op.startsWith('Placeholder')) {\n                placeholders.push(map[node.name]);\n            }\n            else if (node.op === 'Const') {\n                weights.push(map[node.name]);\n            }\n            else if (node.input == null || node.input.length === 0) {\n                initNodes.push(map[node.name]);\n            }\n            return map;\n        }, {});\n        let inputs = [];\n        const outputs = [];\n        let inputNodeNameToKey = {};\n        let outputNodeNameToKey = {};\n        if (signature != null) {\n            inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n            outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n        }\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        // if signature has not outputs set, add any node that does not have\n        // outputs.\n        if (Object.keys(outputNodeNameToKey).length === 0) {\n            allNodes.forEach(key => {\n                const node = nodes[key];\n                if (node.children.length === 0) {\n                    outputs.push(node);\n                }\n            });\n        }\n        else {\n            Object.keys(outputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node != null) {\n                    node.signatureKey = outputNodeNameToKey[name];\n                    outputs.push(node);\n                }\n            });\n        }\n        if (Object.keys(inputNodeNameToKey).length > 0) {\n            Object.keys(inputNodeNameToKey).forEach(name => {\n                const [nodeName,] = getNodeNameAndIndex(name);\n                const node = nodes[nodeName];\n                if (node) {\n                    node.signatureKey = inputNodeNameToKey[name];\n                    inputs.push(node);\n                }\n            });\n        }\n        else {\n            inputs = placeholders;\n        }\n        let functions = {};\n        if (graph.library != null && graph.library.function != null) {\n            functions = graph.library.function.reduce((functions, func) => {\n                functions[func.signature.name] = this.mapFunction(func);\n                return functions;\n            }, {});\n        }\n        const result = { nodes, inputs, outputs, weights, placeholders, signature, functions };\n        if (initNodes.length > 0) {\n            result.initNodes = initNodes;\n        }\n        return result;\n    }\n    mapSignatureEntries(entries) {\n        return Object.keys(entries || {})\n            .reduce((prev, curr) => {\n            prev[entries[curr].name] = curr;\n            return prev;\n        }, {});\n    }\n    mapNode(node) {\n        // Unsupported ops will cause an error at run-time (not parse time), since\n        // they may not be used by the actual execution subgraph.\n        const mapper = getRegisteredOp(node.op) || this.opMappers[node.op] || {};\n        if (node.attr == null) {\n            node.attr = {};\n        }\n        const newNode = {\n            name: node.name,\n            op: node.op,\n            category: mapper.category,\n            inputNames: (node.input ||\n                []).map(input => input.startsWith('^') ? input.substr(1) : input),\n            inputs: [],\n            children: [],\n            inputParams: {},\n            attrParams: {},\n            rawAttrs: node.attr,\n            outputs: mapper.outputs\n        };\n        if (mapper.inputs != null) {\n            newNode.inputParams =\n                mapper.inputs.reduce((map, param) => {\n                    map[param.name] = {\n                        type: param.type,\n                        inputIndexStart: param.start,\n                        inputIndexEnd: param.end\n                    };\n                    return map;\n                }, {});\n        }\n        if (mapper.attrs != null) {\n            newNode.attrParams =\n                mapper.attrs.reduce((map, param) => {\n                    const type = param.type;\n                    let value = undefined;\n                    switch (param.type) {\n                        case 'string':\n                            value = getStringParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'string[]':\n                            value = getStringArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getStringArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number':\n                            value = getNumberParam(node.attr, param.tfName, (param.defaultValue || 0));\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumberParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'number[]':\n                            value = getNumericArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getNumericArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool':\n                            value = getBoolParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'bool[]':\n                            value = getBoolArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getBoolArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape':\n                            value = getTensorShapeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'shape[]':\n                            value = getTensorShapeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getTensorShapeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype':\n                            value = getDtypeParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'dtype[]':\n                            value = getDtypeArrayParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getDtypeArrayParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'func':\n                            value = getFuncParam(node.attr, param.tfName, param.defaultValue);\n                            if (value === undefined && !!param.tfDeprecatedName) {\n                                value = getFuncParam(node.attr, param.tfDeprecatedName, param.defaultValue);\n                            }\n                            break;\n                        case 'tensor':\n                        case 'tensors':\n                            break;\n                        default:\n                            throw new Error(`Unsupported param type: ${param.type} for op: ${node.op}`);\n                    }\n                    map[param.name] = { value, type };\n                    return map;\n                }, {});\n        }\n        return newNode;\n    }\n    // map the TFunctionDef to TFJS graph object\n    mapFunction(functionDef) {\n        const tfNodes = functionDef.nodeDef;\n        const placeholders = [];\n        const weights = [];\n        let nodes = {};\n        if (tfNodes != null) {\n            nodes = tfNodes.reduce((map, node) => {\n                map[node.name] = this.mapNode(node);\n                if (node.op === 'Const') {\n                    weights.push(map[node.name]);\n                }\n                return map;\n            }, {});\n        }\n        const inputs = [];\n        const outputs = [];\n        functionDef.signature.inputArg.forEach(arg => {\n            const [nodeName,] = getNodeNameAndIndex(arg.name);\n            const node = {\n                name: nodeName,\n                op: 'Placeholder',\n                inputs: [],\n                inputNames: [],\n                category: 'graph',\n                inputParams: {},\n                attrParams: { dtype: { value: parseDtypeParam(arg.type), type: 'dtype' } },\n                children: []\n            };\n            node.signatureKey = arg.name;\n            inputs.push(node);\n            nodes[nodeName] = node;\n        });\n        const allNodes = Object.keys(nodes);\n        allNodes.forEach(key => {\n            const node = nodes[key];\n            node.inputNames.forEach((name, index) => {\n                const [nodeName, , outputName] = getNodeNameAndIndex(name);\n                const inputNode = nodes[nodeName];\n                if (inputNode.outputs != null) {\n                    const outputIndex = inputNode.outputs.indexOf(outputName);\n                    if (outputIndex !== -1) {\n                        const inputName = `${nodeName}:${outputIndex}`;\n                        // update the input name to use the mapped output index directly.\n                        node.inputNames[index] = inputName;\n                    }\n                }\n                node.inputs.push(inputNode);\n                inputNode.children.push(node);\n            });\n        });\n        const returnNodeMap = functionDef.ret;\n        functionDef.signature.outputArg.forEach(output => {\n            const [nodeName, index] = getNodeNameAndIndex(returnNodeMap[output.name]);\n            const node = nodes[nodeName];\n            if (node != null) {\n                node.defaultOutput = index;\n                outputs.push(node);\n            }\n        });\n        const signature = this.mapArgsToSignature(functionDef);\n        return { nodes, inputs, outputs, weights, placeholders, signature };\n    }\n    mapArgsToSignature(functionDef) {\n        return {\n            methodName: functionDef.signature.name,\n            inputs: functionDef.signature.inputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg);\n                return map;\n            }, {}),\n            outputs: functionDef.signature.outputArg.reduce((map, arg) => {\n                map[arg.name] = this.mapArgToTensorInfo(arg, functionDef.ret);\n                return map;\n            }, {}),\n        };\n    }\n    mapArgToTensorInfo(arg, nameMap) {\n        let name = arg.name;\n        if (nameMap != null) {\n            name = nameMap[name];\n        }\n        return { name, dtype: arg.type };\n    }\n}\nexport function decodeBase64(text) {\n    const global = env().global;\n    if (typeof global.atob !== 'undefined') {\n        return global.atob(text);\n    }\n    else if (typeof Buffer !== 'undefined') {\n        return new Buffer(text, 'base64').toString();\n    }\n    else {\n        throw new Error('Unable to decode base64 in this environment. ' +\n            'Missing built-in atob() or Buffer()');\n    }\n}\nexport function parseStringParam(s, keepCase) {\n    const value = Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n    return keepCase ? value : value.toLowerCase();\n}\nexport function getStringParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param != null) {\n        return parseStringParam(param.s, keepCase);\n    }\n    return def;\n}\nexport function getBoolParam(attrs, name, def) {\n    const param = attrs[name];\n    return param ? param.b : def;\n}\nexport function getNumberParam(attrs, name, def) {\n    const param = attrs[name] || {};\n    const value = param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n    return (typeof value === 'number') ? value : parseInt(value, 10);\n}\nexport function parseDtypeParam(value) {\n    if (typeof (value) === 'string') {\n        // tslint:disable-next-line:no-any\n        value = tensorflow.DataType[value];\n    }\n    switch (value) {\n        case tensorflow.DataType.DT_FLOAT:\n            return 'float32';\n        case tensorflow.DataType.DT_INT32:\n        case tensorflow.DataType.DT_INT64:\n        case tensorflow.DataType.DT_INT8:\n        case tensorflow.DataType.DT_UINT8:\n            return 'int32';\n        case tensorflow.DataType.DT_BOOL:\n            return 'bool';\n        case tensorflow.DataType.DT_DOUBLE:\n            return 'float32';\n        case tensorflow.DataType.DT_STRING:\n            return 'string';\n        default:\n            // Unknown dtype error will happen at runtime (instead of parse time),\n            // since these nodes might not be used by the actual subgraph execution.\n            return null;\n    }\n}\nexport function getFuncParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.func) {\n        return param.func.name;\n    }\n    return def;\n}\nexport function getDtypeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.type) {\n        return parseDtypeParam(param.type);\n    }\n    return def;\n}\nexport function getDtypeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.type) {\n        return param.list.type.map(v => parseDtypeParam(v));\n    }\n    return def;\n}\nexport function parseTensorShapeParam(shape) {\n    if (shape.unknownRank) {\n        return undefined;\n    }\n    if (shape.dim != null) {\n        return shape.dim.map(dim => (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n    }\n    return [];\n}\nexport function getTensorShapeParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.shape) {\n        return parseTensorShapeParam(param.shape);\n    }\n    return def;\n}\nexport function getNumericArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param) {\n        return ((param.list.f && param.list.f.length ? param.list.f :\n            param.list.i) ||\n            [])\n            .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n    }\n    return def;\n}\nexport function getStringArrayParam(attrs, name, def, keepCase = false) {\n    const param = attrs[name];\n    if (param && param.list && param.list.s) {\n        return param.list.s.map((v) => {\n            return parseStringParam(v, keepCase);\n        });\n    }\n    return def;\n}\nexport function getTensorShapeArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.shape) {\n        return param.list.shape.map((v) => {\n            return parseTensorShapeParam(v);\n        });\n    }\n    return def;\n}\nexport function getBoolArrayParam(attrs, name, def) {\n    const param = attrs[name];\n    if (param && param.list && param.list.b) {\n        return param.list.b;\n    }\n    return def;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl {\n    constructor(node, tensorMap, context) {\n        this.node = node;\n        this.tensorMap = tensorMap;\n        this.context = context;\n        this.inputs = [];\n        this.attrs = {};\n        this.inputs = node.inputNames.map(name => this.getInput(name));\n        if (node.rawAttrs != null) {\n            this.attrs = Object.keys(node.rawAttrs)\n                .reduce((attrs, key) => {\n                attrs[key] = this.getAttr(key);\n                return attrs;\n            }, {});\n        }\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getInput(name) {\n        return getTensor(name, this.tensorMap, this.context);\n    }\n    /**\n     * Return the value of the attribute or input param.\n     * @param name String: name of attribute or input param.\n     */\n    getAttr(name, defaultValue) {\n        const value = this.node.rawAttrs[name];\n        if (value.tensor != null) {\n            return getTensor(name, this.tensorMap, this.context);\n        }\n        if (value.i != null || value.f != null) {\n            return getNumberParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.s != null) {\n            return getStringParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.b != null) {\n            return getBoolParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.shape != null) {\n            return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.type != null) {\n            return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n        }\n        if (value.list != null) {\n            if (value.list.i != null || value.list.f != null) {\n                return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.s != null) {\n                return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.shape != null) {\n                return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.b != null) {\n                return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n            if (value.list.type != null) {\n                return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n            }\n        }\n        return defaultValue;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'BiasAdd':\n        case 'AddV2':\n        case 'Add': {\n            return [tfOps.add(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'AddN': {\n            return [tfOps.addN(getParamValue('tensors', node, tensorMap, context))];\n        }\n        case 'FloorMod':\n        case 'Mod':\n            return [tfOps.mod(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'Mul':\n            return [tfOps.mul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        case 'RealDiv':\n        case 'Div': {\n            return [tfOps.div(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'DivNoNan': {\n            return [tfOps.divNoNan(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'FloorDiv': {\n            return [tfOps.floorDiv(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Sub': {\n            return [tfOps.sub(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Minimum': {\n            return [tfOps.minimum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Maximum': {\n            return [tfOps.maximum(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Pow': {\n            return [tfOps.pow(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'SquaredDifference': {\n            return [tfOps.squaredDifference(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'arithmetic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n            return [tfOps.abs(getParamValue('x', node, tensorMap, context))];\n        case 'Acos':\n            return [tfOps.acos(getParamValue('x', node, tensorMap, context))];\n        case 'Acosh':\n            return [tfOps.acosh(getParamValue('x', node, tensorMap, context))];\n        case 'Asin':\n            return [tfOps.asin(getParamValue('x', node, tensorMap, context))];\n        case 'Asinh':\n            return [tfOps.asinh(getParamValue('x', node, tensorMap, context))];\n        case 'Atan':\n            return [tfOps.atan(getParamValue('x', node, tensorMap, context))];\n        case 'Atan2':\n            return [tfOps.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n        case 'Atanh':\n            return [tfOps.atanh(getParamValue('x', node, tensorMap, context))];\n        case 'Ceil':\n            return [tfOps.ceil(getParamValue('x', node, tensorMap, context))];\n        case 'Complex':\n            return [tfOps.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n        case 'Cos':\n            return [tfOps.cos(getParamValue('x', node, tensorMap, context))];\n        case 'Cosh':\n            return [tfOps.cosh(getParamValue('x', node, tensorMap, context))];\n        case 'Elu':\n            return [tfOps.elu(getParamValue('x', node, tensorMap, context))];\n        case 'Erf':\n            return [tfOps.erf(getParamValue('x', node, tensorMap, context))];\n        case 'Exp':\n            return [tfOps.exp(getParamValue('x', node, tensorMap, context))];\n        case 'Expm1': {\n            return [tfOps.expm1(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Floor':\n            return [tfOps.floor(getParamValue('x', node, tensorMap, context))];\n        case 'Log':\n            return [tfOps.log(getParamValue('x', node, tensorMap, context))];\n        case 'Log1p': {\n            return [tfOps.log1p(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Imag':\n            return [tfOps.imag(getParamValue('x', node, tensorMap, context))];\n        case 'Neg':\n            return [tfOps.neg(getParamValue('x', node, tensorMap, context))];\n        case 'Reciprocal': {\n            return [tfOps.reciprocal(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Real':\n            return [tfOps.real(getParamValue('x', node, tensorMap, context))];\n        case 'Relu':\n            return [tfOps.relu(getParamValue('x', node, tensorMap, context))];\n        case 'Round': {\n            return [tfOps.round(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Selu':\n            return [tfOps.selu(getParamValue('x', node, tensorMap, context))];\n        case 'Sigmoid':\n            return [tfOps.sigmoid(getParamValue('x', node, tensorMap, context))];\n        case 'Sin':\n            return [tfOps.sin(getParamValue('x', node, tensorMap, context))];\n        case 'Sign': {\n            return [tfOps.sign(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sinh': {\n            return [tfOps.sinh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Softplus': {\n            return [tfOps.softplus(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Sqrt': {\n            return [tfOps.sqrt(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Square': {\n            return [tfOps.square(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tanh': {\n            return [tfOps.tanh(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'Tan':\n            return [tfOps.tan(getParamValue('x', node, tensorMap, context))];\n        case 'ClipByValue':\n            return [tfOps.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n        case 'Relu6':\n            return [tfOps.relu6(getParamValue('x', node, tensorMap, context))];\n        case 'Rsqrt':\n            return [tfOps.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n        case 'LeakyRelu':\n            return [tfOps.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'Prelu':\n            return [tfOps.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n        case 'IsNan':\n            return [tfOps.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'basic_math';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices nummber[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        this.tensors.length = size;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(elementShape, elementDtype, numElements) {\n    return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'If':\n        case 'StatelessIf': {\n            const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n            const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n            const cond = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            const condValue = await cond.data();\n            if (condValue[0]) {\n                return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n            else {\n                return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n            }\n        }\n        case 'While':\n        case 'StatelessWhile': {\n            const bodyFunc = getParamValue('body', node, tensorMap, context);\n            const condFunc = getParamValue('cond', node, tensorMap, context);\n            const args = getParamValue('args', node, tensorMap, context);\n            // Calculate the condition of the loop\n            const condResult = (await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap));\n            const argIds = args.map(tensor => tensor.id);\n            let condValue = await condResult[0].data();\n            // Dispose the intermediate tensors for condition function\n            condResult.forEach(tensor => {\n                if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n                    tensor.dispose();\n                }\n            });\n            let result = args;\n            while (condValue[0]) {\n                // Record the previous result for intermediate tensor tracking\n                const origResult = result;\n                // Execution the body of the loop\n                result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n                const resultIds = result.map(tensor => tensor.id);\n                // Dispose the intermediate tensor for body function that is not global\n                // kept, not input/output of the body function\n                origResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n                // Recalcuate the condition of the loop using the latest results.\n                const condResult = (await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap));\n                condValue = await condResult[0].data();\n                // Dispose the intermediate tensors for condition function\n                condResult.forEach(tensor => {\n                    if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n                        resultIds.indexOf(tensor.id) === -1) {\n                        tensor.dispose();\n                    }\n                });\n            }\n            return result;\n        }\n        case 'LoopCond': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            return [cloneTensor(pred)];\n        }\n        case 'Switch': {\n            const pred = getParamValue('pred', node, tensorMap, context);\n            let data = getParamValue('data', node, tensorMap, context);\n            if (!data.kept) {\n                data = cloneTensor(data);\n            }\n            // Outputs nodes :0 => false, :1 => true\n            return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n        }\n        case 'Merge': {\n            const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n            if (inputName) {\n                const data = getTensor(inputName, tensorMap, context);\n                return [cloneTensor(data)];\n            }\n            return undefined;\n        }\n        case 'Enter': {\n            const frameId = getParamValue('frameName', node, tensorMap, context);\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.enterFrame(frameId);\n            return [cloneTensor(data)];\n        }\n        case 'Exit': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.exitFrame();\n            return [cloneTensor(data)];\n        }\n        case 'NextIteration': {\n            const data = getParamValue('tensor', node, tensorMap, context);\n            context.nextIteration();\n            return [cloneTensor(data)];\n        }\n        case 'TensorArrayV3': {\n            const size = getParamValue('size', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n            const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n            const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n            const name = getParamValue('name', node, tensorMap, context);\n            const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n            context.addTensorArray(tensorArray);\n            return [tensorArray.idTensor, scalar(1.0)];\n        }\n        case 'TensorArrayWriteV3': {\n            const id = getParamValue('tensorArrayId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const writeTensorArray = context.getTensorArray(id.id);\n            writeTensorArray.write(index, writeTensor);\n            return [writeTensorArray.idTensor];\n        }\n        case 'TensorArrayReadV3': {\n            const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const readTensorArray = context.getTensorArray(readId.id);\n            return [readTensorArray.read(readIndex)];\n        }\n        case 'TensorArrayGatherV3': {\n            const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n            const gatherTensorArray = context.getTensorArray(gatherId.id);\n            return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n        }\n        case 'TensorArrayScatterV3': {\n            const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const scatterTensorArray = context.getTensorArray(scatterId.id);\n            scatterTensorArray.scatter(scatterIndices, scatterTensor);\n            return [scatterTensorArray.idTensor];\n        }\n        case 'TensorArrayConcatV3': {\n            const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const concatTensorArray = context.getTensorArray(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            return [concatTensorArray.concat(concatDtype)];\n        }\n        case 'TensorArraySplitV3': {\n            const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const splitTensorArray = context.getTensorArray(splitId.id);\n            splitTensorArray.split(lengths, splitTensor);\n            return [splitTensorArray.idTensor];\n        }\n        case 'TensorArraySizeV3': {\n            const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const sizeTensorArray = context.getTensorArray(sizeId.id);\n            return [scalar(sizeTensorArray.size(), 'int32')];\n        }\n        case 'TensorArrayCloseV3': {\n            const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n            const closeTensorArray = context.getTensorArray(closeId.id);\n            closeTensorArray.clearAndClose();\n            return [closeTensorArray.idTensor];\n        }\n        case 'TensorListSetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const index = getParamValue('index', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.setItem(index, writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGetItem': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const readIndex = getParamValue('index', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.getItem(readIndex, elementShape, elementDType)];\n        }\n        case 'TensorListScatterV2':\n        case 'TensorListScatter': {\n            const scatterIndices = getParamValue('indices', node, tensorMap, context);\n            const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListReserve':\n        case 'EmptyTensorList': {\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            let numElementsParam;\n            if (node.op === 'TensorListReserve') {\n                numElementsParam = 'numElements';\n            }\n            else {\n                numElementsParam = 'maxNumElements';\n            }\n            const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n            const tensorList = reserve(elementShape, elementDtype, numElements);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListGather': {\n            const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n            const gatherIndices = getParamValue('indices', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(gatherId.id);\n            return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n        }\n        case 'TensorListStack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const numElements = getParamValue('numElements', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.stack(elementShape, elementDtype, numElements)];\n        }\n        case 'TensorListFromTensor': {\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = fromTensor(tensor, elementShape, elementDtype);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListConcat': {\n            const concatId = getParamValue('tensorListId', node, tensorMap, context);\n            const tensorList = context.getTensorList(concatId.id);\n            const concatDtype = getParamValue('dtype', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            return [tensorList.concat(concatDtype, elementShape)];\n        }\n        case 'TensorListPushBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const writeTensor = getParamValue('tensor', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            tensorList.pushBack(writeTensor);\n            return [tensorList.idTensor];\n        }\n        case 'TensorListPopBack': {\n            const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const elementDType = getParamValue('elementDType', node, tensorMap, context);\n            const tensorList = context.getTensorList(idTensor.id);\n            return [tensorList.popBack(elementShape, elementDType)];\n        }\n        case 'TensorListSplit': {\n            const splitTensor = getParamValue('tensor', node, tensorMap, context);\n            const elementShape = getParamValue('elementShape', node, tensorMap, context);\n            const lengths = getParamValue('lengths', node, tensorMap, context);\n            const tensorList = split(splitTensor, lengths, elementShape);\n            context.addTensorList(tensorList);\n            return [tensorList.idTensor];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'control';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n    const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n    const isBiasAdd = extraOp === 'biasadd';\n    const noBiasAdd = !isBiasAdd;\n    const isPrelu = activationFunc === 'prelu';\n    const isBatchNorm = extraOp === 'fusedbatchnorm';\n    const numArgs = getParamValue('numArgs', node, tensorMap, context);\n    if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                'must have two extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && isBiasAdd && numArgs !== 1) {\n            throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                'one extra argument: bias.');\n        }\n    }\n    if (isBatchNorm) {\n        throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n    }\n    const stride = getParamValue('strides', node, tensorMap, context);\n    const pad = getPadding(node, tensorMap, context);\n    const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n        .toUpperCase();\n    const dilations = getParamValue('dilations', node, tensorMap, context);\n    let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n    if (noBiasAdd) {\n        preluArg = biasArg;\n        biasArg = undefined;\n    }\n    const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n    return {\n        stride,\n        pad,\n        dataFormat,\n        dilations,\n        biasArg,\n        preluArg,\n        activationFunc,\n        leakyreluAlpha\n    };\n}\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Conv1D': {\n            const stride = getParamValue('stride', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilation = getParamValue('dilation', node, tensorMap, context);\n            return [tfOps.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n        }\n        case 'Conv2D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [tfOps.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [tfOps.fused.conv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'FusedDepthwiseConv2dNative': {\n            const { stride, pad, dataFormat, dilations, biasArg, preluArg, activationFunc, leakyreluAlpha, } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n            return [tfOps.fused.depthwiseConv2d({\n                    x: getParamValue('x', node, tensorMap, context),\n                    filter: getParamValue('filter', node, tensorMap, context),\n                    strides: [stride[1], stride[2]],\n                    pad: pad,\n                    dataFormat: dataFormat,\n                    dilations: [dilations[1], dilations[2]],\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            return [tfOps.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getPadding(node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            return [tfOps.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context)\n                .toUpperCase();\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            return [tfOps.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPool': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n        }\n        case 'MaxPoolWithArgmax': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n            const { result, indexes } = tfOps.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n            return [result, indexes];\n        }\n        case 'AvgPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'MaxPool3D': {\n            const stride = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n            return [tfOps.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n        }\n        case 'Dilation2D': {\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const pad = getParamValue('pad', node, tensorMap, context);\n            const dilations = getParamValue('dilations', node, tensorMap, context);\n            // strides: [1, stride_height, stride_width, 1].\n            const strideHeight = strides[1];\n            const strideWidth = strides[2];\n            // dilations: [1, dilation_height, dilation_width, 1].\n            const dilationHeight = dilations[1];\n            const dilationWidth = dilations[2];\n            return [tfOps.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'convolution';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Fill': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const dtype = getParamValue('dtype', node, tensorMap, context);\n            const value = getParamValue('value', node, tensorMap, context);\n            return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const num = getParamValue('num', node, tensorMap, context);\n            return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n            const logits = getParamValue('logits', node, tensorMap, context);\n            const numSamples = getParamValue('numSamples', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const depth = getParamValue('depth', node, tensorMap, context);\n            const onValue = getParamValue('onValue', node, tensorMap, context);\n            const offValue = getParamValue('offValue', node, tensorMap, context);\n            return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n            return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'OnesLike': {\n            return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RandomUniform': {\n            return [tfOps.randomUniform(\n                // tslint:disable-next-line:no-any\n                getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'Range': {\n            const start = getParamValue('start', node, tensorMap, context);\n            const stop = getParamValue('stop', node, tensorMap, context);\n            const step = getParamValue('step', node, tensorMap, context);\n            return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'TruncatedNormal': {\n            const shape = getParamValue('shape', node, tensorMap, context);\n            const mean = getParamValue('mean', node, tensorMap, context);\n            const stdDev = getParamValue('stdDev', node, tensorMap, context);\n            const seed = getParamValue('seed', node, tensorMap, context);\n            return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n        }\n        case 'Zeros': {\n            return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ZerosLike': {\n            return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'creation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nfunction nmsParams(node, tensorMap, context) {\n    const boxes = getParamValue('boxes', node, tensorMap, context);\n    const scores = getParamValue('scores', node, tensorMap, context);\n    const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n    const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n    const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n    const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n    return {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n    };\n}\nexport const executeOp = async (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'NonMaxSuppressionV5': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = nmsParams(node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n            return [result.selectedIndices, result.selectedScores];\n        }\n        case 'NonMaxSuppressionV4': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n            const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n            return [result.selectedIndices, result.validOutputs];\n        }\n        case 'NonMaxSuppressionV3':\n        case 'NonMaxSuppressionV2': {\n            const { boxes, scores, maxOutputSize, iouThreshold, scoreThreshold } = nmsParams(node, tensorMap, context);\n            return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n        }\n        case 'Where': {\n            const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n            const result = [await tfOps.whereAsync(condition)];\n            condition.dispose();\n            return result;\n        }\n        case 'ListDiff': {\n            return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'dynamic';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'TopKV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const k = getParamValue('k', node, tensorMap, context);\n            const sorted = getParamValue('sorted', node, tensorMap, context);\n            const result = tfOps.topk(x, k, sorted);\n            return [result.values, result.indices];\n        }\n        case 'Unique': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const result = tfOps.unique(x);\n            return [result.values, result.indices];\n        }\n        case 'UniqueV2': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const result = tfOps.unique(x, axis);\n            return [result.values, result.indices];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'evaluation';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXZhbHVhdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ldmFsdWF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUFFLE9BQXlCLEVBQ3JELEVBQUU7SUFDVCxRQUFRLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLFFBQVEsQ0FBQyxDQUFDO1lBQ2IsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2pFLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNqRSxNQUFNLE1BQU0sR0FDUixhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFZLENBQUM7WUFDakUsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ3hDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4QztRQUNELEtBQUssUUFBUSxDQUFDLENBQUM7WUFDYixNQUFNLENBQUMsR0FBRyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDakUsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFDRCxLQUFLLFVBQVUsQ0FBQyxDQUFDO1lBQ2YsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2pFLE1BQU0sSUFBSSxHQUNOLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUM5RCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVWLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7VGVuc29yfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1pbXBvcnRzLWZyb20tZGlzdFxuaW1wb3J0ICogYXMgdGZPcHMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlL2Rpc3Qvb3BzL29wc19mb3JfY29udmVydGVyJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0ludGVybmFsT3BFeGVjdXRvciwgTm9kZX0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbXBvcnQge2dldFBhcmFtVmFsdWV9IGZyb20gJy4vdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgZXhlY3V0ZU9wOiBJbnRlcm5hbE9wRXhlY3V0b3IgPVxuICAgIChub2RlOiBOb2RlLCB0ZW5zb3JNYXA6IE5hbWVkVGVuc29yc01hcCwgY29udGV4dDogRXhlY3V0aW9uQ29udGV4dCk6XG4gICAgICAgIFRlbnNvcltdID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgICAgIGNhc2UgJ1RvcEtWMic6IHtcbiAgICAgICAgICAgICAgY29uc3QgeCA9IGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICAgICAgY29uc3QgayA9IGdldFBhcmFtVmFsdWUoJ2snLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgY29uc3Qgc29ydGVkID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NvcnRlZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgYm9vbGVhbjtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGZPcHMudG9wayh4LCBrLCBzb3J0ZWQpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VuaXF1ZSc6IHtcbiAgICAgICAgICAgICAgY29uc3QgeCA9IGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGZPcHMudW5pcXVlKHgpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1VuaXF1ZVYyJzoge1xuICAgICAgICAgICAgICBjb25zdCB4ID0gZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgICAgICBjb25zdCBheGlzID1cbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2F4aXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcjtcbiAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdGZPcHMudW5pcXVlKHgsIGF4aXMpO1xuICAgICAgICAgICAgICByZXR1cm4gW3Jlc3VsdC52YWx1ZXMsIHJlc3VsdC5pbmRpY2VzXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5leHBvcnQgY29uc3QgQ0FURUdPUlkgPSAnZXZhbHVhdGlvbic7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Const': {\n            return tensorMap[node.name];\n        }\n        case 'PlaceholderWithDefault':\n            const def = getParamValue('default', node, tensorMap, context);\n            return [getTensor(node.name, tensorMap, context) || def];\n        case 'Placeholder':\n            return [getTensor(node.name, tensorMap, context)];\n        case 'Identity':\n        case 'StopGradient':\n        case 'FakeQuantWithMinMaxVars': { // This op is currently ignored.\n            const data = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(data)];\n        }\n        case 'IdentityN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => cloneTensor(t));\n        case 'Snapshot':\n            const snapshot = getParamValue('x', node, tensorMap, context);\n            return [cloneTensor(snapshot)];\n        case 'Shape':\n            return [tfOps.tensor1d(getParamValue('x', node, tensorMap, context).shape, 'int32')];\n        case 'ShapeN':\n            return getParamValue('x', node, tensorMap, context)\n                .map((t) => tfOps.tensor1d(t.shape));\n        case 'Size':\n            return [tfOps.scalar(getParamValue('x', node, tensorMap, context).size, 'int32')];\n        case 'Rank':\n            return [tfOps.scalar(getParamValue('x', node, tensorMap, context).rank, 'int32')];\n        case 'NoOp':\n            return [tfOps.scalar(1)];\n        case 'Print':\n            const input = getParamValue('x', node, tensorMap, context);\n            const data = getParamValue('data', node, tensorMap, context);\n            const message = getParamValue('message', node, tensorMap, context);\n            const summarize = getParamValue('summarize', node, tensorMap, context);\n            console.warn('The graph has a tf.print() operation,' +\n                'usually used for debugging, which slows down performance.');\n            console.log(message);\n            for (let i = 0; i < data.length; i++) {\n                console.log(Array.prototype.slice.call(data[i].dataSync())\n                    .slice(0, summarize));\n            }\n            return [input];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'graph';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n    /**\n     * Constructor of HashTable. Creates a hash table.\n     *\n     * @param keyDType `dtype` of the table keys.\n     * @param valueDType `dtype` of the table values.\n     */\n    constructor(keyDType, valueDType) {\n        this.keyDType = keyDType;\n        this.valueDType = valueDType;\n        this.handle = scalar(0);\n        // tslint:disable-next-line: no-any\n        this.tensorMap = new Map();\n        keep(this.handle);\n    }\n    get id() {\n        return this.handle.id;\n    }\n    /**\n     * Dispose the tensors and handle and clear the hashtable.\n     */\n    clearAndClose() {\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        this.handle.dispose();\n    }\n    /**\n     * The number of items in the hash table.\n     */\n    size() {\n        return this.tensorMap.size;\n    }\n    /**\n     * The number of items in the hash table as a rank-0 tensor.\n     */\n    tensorSize() {\n        return tfOps.scalar(this.size(), 'int32');\n    }\n    /**\n     * Replaces the contents of the table with the specified keys and values.\n     * @param keys Keys to store in the hashtable.\n     * @param values Values to store in the hashtable.\n     */\n    async import(keys, values) {\n        this.checkKeyAndValueTensor(keys, values);\n        // We only store the primitive values of the keys, this allows lookup\n        // to be O(1).\n        const $keys = await keys.data();\n        // Clear the hashTable before inserting new values.\n        this.tensorMap.forEach(value => value.dispose());\n        this.tensorMap.clear();\n        return tidy(() => {\n            const $values = unstack(values);\n            const keysLength = $keys.length;\n            const valuesLength = $values.length;\n            util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` +\n                `${keysLength} elements, the values has ${valuesLength} ` +\n                `elements.`);\n            for (let i = 0; i < keysLength; i++) {\n                const key = $keys[i];\n                const value = $values[i];\n                keep(value);\n                this.tensorMap.set(key, value);\n            }\n            return this.handle;\n        });\n    }\n    /**\n     * Looks up keys in a hash table, outputs the corresponding values.\n     *\n     * Performs batch lookups, for every element in the key tensor, `find`\n     * stacks the corresponding value into the return tensor.\n     *\n     * If an element is not present in the table, the given `defaultValue` is\n     * used.\n     *\n     * @param keys Keys to look up. Must have the same type as the keys of the\n     *     table.\n     * @param defaultValue The scalar `defaultValue` is the value output for keys\n     *     not present in the table. It must also be of the same type as the\n     *     table values.\n     */\n    async find(keys, defaultValue) {\n        this.checkKeyAndValueTensor(keys, defaultValue);\n        const $keys = await keys.data();\n        return tidy(() => {\n            const result = [];\n            for (let i = 0; i < $keys.length; i++) {\n                const key = $keys[i];\n                const value = this.findWithDefault(key, defaultValue);\n                result.push(value);\n            }\n            return stack(result);\n        });\n    }\n    // tslint:disable-next-line: no-any\n    findWithDefault(key, defaultValue) {\n        const result = this.tensorMap.get(key);\n        return result != null ? result : defaultValue;\n    }\n    checkKeyAndValueTensor(key, value) {\n        if (key.dtype !== this.keyDType) {\n            throw new Error(`Expect key dtype ${this.keyDType}, but got ` +\n                `${key.dtype}`);\n        }\n        if (value.dtype !== this.valueDType) {\n            throw new Error(`Expect value dtype ${this.valueDType}, but got ` +\n                `${value.dtype}`);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n    switch (node.op) {\n        case 'HashTable':\n        case 'HashTableV2': {\n            const keyDType = getParamValue('keyDType', node, tensorMap, context);\n            const valueDType = getParamValue('valueDType', node, tensorMap, context);\n            const hashTable = new HashTable(keyDType, valueDType);\n            resourceManager.addHashTable(node.name, hashTable);\n            return [hashTable.handle];\n        }\n        case 'LookupTableImport':\n        case 'LookupTableImportV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.import(keys, values)];\n        }\n        case 'LookupTableFind':\n        case 'LookupTableFindV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const keys = getParamValue('keys', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [await hashTable.find(keys, defaultValue)];\n        }\n        case 'LookupTableSize':\n        case 'LookupTableSizeV2': {\n            const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n            const hashTable = resourceManager.getHashTableById(handle.id);\n            return [hashTable.tensorSize()];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'hash_table';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzaF90YWJsZV9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9oYXNoX3RhYmxlX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQU1ILE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUlwRCxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBNEIsS0FBSyxFQUNuRCxJQUFVLEVBQUUsU0FBMEIsRUFBRSxPQUF5QixFQUNqRSxlQUFnQyxFQUFxQixFQUFFO0lBQ3pELFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssV0FBVyxDQUFDO1FBQ2pCLEtBQUssYUFBYSxDQUFDLENBQUM7WUFDbEIsTUFBTSxRQUFRLEdBQ1YsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxDQUFDO1lBQ3BFLE1BQU0sVUFBVSxHQUNaLGFBQWEsQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUV0RSxNQUFNLFNBQVMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDdEQsZUFBZSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ25ELE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0I7UUFDRCxLQUFLLG1CQUFtQixDQUFDO1FBQ3pCLEtBQUsscUJBQXFCLENBQUMsQ0FBQztZQUMxQixNQUFNLE1BQU0sR0FBRyxhQUFhLENBQ1QsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUN2QyxlQUFlLENBQVcsQ0FBQztZQUM5QyxNQUFNLElBQUksR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDdkUsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBRWhFLE1BQU0sU0FBUyxHQUFHLGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7WUFFOUQsT0FBTyxDQUFDLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztRQUNELEtBQUssaUJBQWlCLENBQUM7UUFDdkIsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sTUFBTSxHQUFHLGFBQWEsQ0FDVCxhQUFhLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQ3ZDLGVBQWUsQ0FBVyxDQUFDO1lBQzlDLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUN2RSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFFdEUsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5RCxPQUFPLENBQUMsTUFBTSxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ25EO1FBQ0QsS0FBSyxpQkFBaUIsQ0FBQztRQUN2QixLQUFLLG1CQUFtQixDQUFDLENBQUM7WUFDeEIsTUFBTSxNQUFNLEdBQUcsYUFBYSxDQUNULGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFDdkMsZUFBZSxDQUFXLENBQUM7WUFFOUMsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM5RCxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7U0FDakM7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7RGF0YVR5cGUsIFRlbnNvcn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHtOYW1lZFRlbnNvcnNNYXB9IGZyb20gJy4uLy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtFeGVjdXRpb25Db250ZXh0fSBmcm9tICcuLi8uLi9leGVjdXRvci9leGVjdXRpb25fY29udGV4dCc7XG5pbXBvcnQge0hhc2hUYWJsZX0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvaGFzaF90YWJsZSc7XG5pbXBvcnQge1Jlc291cmNlTWFuYWdlcn0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvcmVzb3VyY2VfbWFuYWdlcic7XG5pbXBvcnQge0ludGVybmFsT3BBc3luY0V4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Z2V0UGFyYW1WYWx1ZX0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BBc3luY0V4ZWN1dG9yID0gYXN5bmMoXG4gICAgbm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQsXG4gICAgcmVzb3VyY2VNYW5hZ2VyOiBSZXNvdXJjZU1hbmFnZXIpOiBQcm9taXNlPFRlbnNvcltdPiA9PiB7XG4gIHN3aXRjaCAobm9kZS5vcCkge1xuICAgIGNhc2UgJ0hhc2hUYWJsZSc6XG4gICAgY2FzZSAnSGFzaFRhYmxlVjInOiB7XG4gICAgICBjb25zdCBrZXlEVHlwZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgna2V5RFR5cGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIERhdGFUeXBlO1xuICAgICAgY29uc3QgdmFsdWVEVHlwZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVEVHlwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgRGF0YVR5cGU7XG5cbiAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IG5ldyBIYXNoVGFibGUoa2V5RFR5cGUsIHZhbHVlRFR5cGUpO1xuICAgICAgcmVzb3VyY2VNYW5hZ2VyLmFkZEhhc2hUYWJsZShub2RlLm5hbWUsIGhhc2hUYWJsZSk7XG4gICAgICByZXR1cm4gW2hhc2hUYWJsZS5oYW5kbGVdO1xuICAgIH1cbiAgICBjYXNlICdMb29rdXBUYWJsZUltcG9ydCc6XG4gICAgY2FzZSAnTG9va3VwVGFibGVJbXBvcnRWMic6IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmxlSGFuZGxlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlTWFuYWdlcikgYXMgVGVuc29yO1xuICAgICAgY29uc3Qga2V5cyA9IGdldFBhcmFtVmFsdWUoJ2tleXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IHZhbHVlcyA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFsdWVzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG5cbiAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IHJlc291cmNlTWFuYWdlci5nZXRIYXNoVGFibGVCeUlkKGhhbmRsZS5pZCk7XG5cbiAgICAgIHJldHVybiBbYXdhaXQgaGFzaFRhYmxlLmltcG9ydChrZXlzLCB2YWx1ZXMpXTtcbiAgICB9XG4gICAgY2FzZSAnTG9va3VwVGFibGVGaW5kJzpcbiAgICBjYXNlICdMb29rdXBUYWJsZUZpbmRWMic6IHtcbiAgICAgIGNvbnN0IGhhbmRsZSA9IGdldFBhcmFtVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3RhYmxlSGFuZGxlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlTWFuYWdlcikgYXMgVGVuc29yO1xuICAgICAgY29uc3Qga2V5cyA9IGdldFBhcmFtVmFsdWUoJ2tleXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgIGNvbnN0IGRlZmF1bHRWYWx1ZSA9XG4gICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVmYXVsdFZhbHVlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3I7XG5cbiAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IHJlc291cmNlTWFuYWdlci5nZXRIYXNoVGFibGVCeUlkKGhhbmRsZS5pZCk7XG4gICAgICByZXR1cm4gW2F3YWl0IGhhc2hUYWJsZS5maW5kKGtleXMsIGRlZmF1bHRWYWx1ZSldO1xuICAgIH1cbiAgICBjYXNlICdMb29rdXBUYWJsZVNpemUnOlxuICAgIGNhc2UgJ0xvb2t1cFRhYmxlU2l6ZVYyJzoge1xuICAgICAgY29uc3QgaGFuZGxlID0gZ2V0UGFyYW1WYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAndGFibGVIYW5kbGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VNYW5hZ2VyKSBhcyBUZW5zb3I7XG5cbiAgICAgIGNvbnN0IGhhc2hUYWJsZSA9IHJlc291cmNlTWFuYWdlci5nZXRIYXNoVGFibGVCeUlkKGhhbmRsZS5pZCk7XG4gICAgICByZXR1cm4gW2hhc2hUYWJsZS50ZW5zb3JTaXplKCldO1xuICAgIH1cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgVHlwZUVycm9yKGBOb2RlIHR5cGUgJHtub2RlLm9wfSBpcyBub3QgaW1wbGVtZW50ZWRgKTtcbiAgfVxufTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ2hhc2hfdGFibGUnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'ResizeBilinear': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n            const images = getParamValue('images', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n            const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n            return [tfOps.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n            const image = getParamValue('image', node, tensorMap, context);\n            const boxes = getParamValue('boxes', node, tensorMap, context);\n            const boxInd = getParamValue('boxInd', node, tensorMap, context);\n            const cropSize = getParamValue('cropSize', node, tensorMap, context);\n            const method = getParamValue('method', node, tensorMap, context);\n            const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n            return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'image';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9leGVjdXRvcnMvaW1hZ2VfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsaURBQWlEO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sa0RBQWtELENBQUM7QUFNMUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQ2xCLENBQUMsSUFBVSxFQUFFLFNBQTBCLEVBQ3RDLE9BQXlCLEVBQVksRUFBRTtJQUN0QyxRQUFRLElBQUksQ0FBQyxFQUFFLEVBQUU7UUFDZixLQUFLLGdCQUFnQixDQUFDLENBQUM7WUFDckIsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sSUFBSSxHQUNOLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQWEsQ0FBQztZQUNoRSxNQUFNLFlBQVksR0FDZCxhQUFhLENBQUMsY0FBYyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUMvQyxDQUFDO1lBQ1osTUFBTSxnQkFBZ0IsR0FDbEIsYUFBYSxDQUFDLGtCQUFrQixFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUNuRCxDQUFDO1lBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUM5QixNQUE2QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFDL0QsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsS0FBSyx1QkFBdUIsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNoRSxNQUFNLElBQUksR0FDTixhQUFhLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDaEUsTUFBTSxZQUFZLEdBQ2QsYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDL0MsQ0FBQztZQUNaLE1BQU0sZ0JBQWdCLEdBQ2xCLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDbkQsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLHFCQUFxQixDQUNyQyxNQUE2QixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFDL0QsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1NBQ3hCO1FBQ0QsS0FBSyxlQUFlLENBQUMsQ0FBQztZQUNwQixNQUFNLEtBQUssR0FDUCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUM7WUFDL0QsTUFBTSxLQUFLLEdBQ1AsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQy9ELE1BQU0sTUFBTSxHQUNSLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQztZQUNoRSxNQUFNLFFBQVEsR0FDVixhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUM7WUFDcEUsTUFBTSxNQUFNLEdBQ1IsYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDO1lBQ2hFLE1BQU0sa0JBQWtCLEdBQ3BCLGFBQWEsQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDdEQsQ0FBQztZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FDN0IsS0FBaUIsRUFBRSxLQUFpQixFQUFFLE1BQWtCLEVBQ3hELFFBQTRCLEVBQUUsTUFBZ0MsRUFDOUQsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1NBQzFCO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvciwgVGVuc29yMUQsIFRlbnNvcjJELCBUZW5zb3IzRCwgVGVuc29yNER9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWltcG9ydHMtZnJvbS1kaXN0XG5pbXBvcnQgKiBhcyB0Zk9wcyBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUvZGlzdC9vcHMvb3BzX2Zvcl9jb252ZXJ0ZXInO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SW50ZXJuYWxPcEV4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Z2V0UGFyYW1WYWx1ZX0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BFeGVjdXRvciA9XG4gICAgKG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLFxuICAgICBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0KTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1Jlc2l6ZUJpbGluZWFyJzoge1xuICAgICAgICAgIGNvbnN0IGltYWdlcyA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2ltYWdlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgIGNvbnN0IHNpemUgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzaXplJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgICAgICBjb25zdCBhbGlnbkNvcm5lcnMgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhbGlnbkNvcm5lcnMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgIGJvb2xlYW47XG4gICAgICAgICAgY29uc3QgaGFsZlBpeGVsQ2VudGVycyA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2hhbGZQaXhlbENlbnRlcnMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgIGJvb2xlYW47XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5pbWFnZS5yZXNpemVCaWxpbmVhcihcbiAgICAgICAgICAgICAgaW1hZ2VzIGFzIFRlbnNvcjNEIHwgVGVuc29yNEQsIFtzaXplWzBdLCBzaXplWzFdXSwgYWxpZ25Db3JuZXJzLFxuICAgICAgICAgICAgICBoYWxmUGl4ZWxDZW50ZXJzKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnUmVzaXplTmVhcmVzdE5laWdoYm9yJzoge1xuICAgICAgICAgIGNvbnN0IGltYWdlcyA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2ltYWdlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgIGNvbnN0IHNpemUgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzaXplJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgICAgICBjb25zdCBhbGlnbkNvcm5lcnMgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhbGlnbkNvcm5lcnMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgIGJvb2xlYW47XG4gICAgICAgICAgY29uc3QgaGFsZlBpeGVsQ2VudGVycyA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2hhbGZQaXhlbENlbnRlcnMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgIGJvb2xlYW47XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5pbWFnZS5yZXNpemVOZWFyZXN0TmVpZ2hib3IoXG4gICAgICAgICAgICAgIGltYWdlcyBhcyBUZW5zb3IzRCB8IFRlbnNvcjRELCBbc2l6ZVswXSwgc2l6ZVsxXV0sIGFsaWduQ29ybmVycyxcbiAgICAgICAgICAgICAgaGFsZlBpeGVsQ2VudGVycyldO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0Nyb3BBbmRSZXNpemUnOiB7XG4gICAgICAgICAgY29uc3QgaW1hZ2UgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbWFnZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yO1xuICAgICAgICAgIGNvbnN0IGJveGVzID1cbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYm94ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICBjb25zdCBib3hJbmQgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdib3hJbmQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjtcbiAgICAgICAgICBjb25zdCBjcm9wU2l6ZSA9XG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2Nyb3BTaXplJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXJbXTtcbiAgICAgICAgICBjb25zdCBtZXRob2QgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdtZXRob2QnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZztcbiAgICAgICAgICBjb25zdCBleHRyYXBvbGF0aW9uVmFsdWUgPVxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdleHRyYXBvbGF0aW9uVmFsdWUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgIG51bWJlcjtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmltYWdlLmNyb3BBbmRSZXNpemUoXG4gICAgICAgICAgICAgIGltYWdlIGFzIFRlbnNvcjRELCBib3hlcyBhcyBUZW5zb3IyRCwgYm94SW5kIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBjcm9wU2l6ZSBhcyBbbnVtYmVyLCBudW1iZXJdLCBtZXRob2QgYXMgJ2JpbGluZWFyJyB8ICduZWFyZXN0JyxcbiAgICAgICAgICAgICAgZXh0cmFwb2xhdGlvblZhbHVlKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdpbWFnZSc7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Equal': {\n            return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'NotEqual': {\n            return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Greater': {\n            return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'GreaterEqual': {\n            return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Less': {\n            return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LessEqual': {\n            return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalAnd': {\n            return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'LogicalNot': {\n            return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\n        }\n        case 'LogicalOr': {\n            return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        case 'Select':\n        case 'SelectV2': {\n            return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'logical';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naWNhbF9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9sb2dpY2FsX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUN0QyxPQUF5QixFQUFZLEVBQUU7SUFDdEMsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxPQUFPLENBQUMsQ0FBQztZQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUNmLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDdEQsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssVUFBVSxDQUFDLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FDbEIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxTQUFTLENBQUMsQ0FBQztZQUNkLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUNqQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3RELGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLGNBQWMsQ0FBQyxDQUFDO1lBQ25CLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUN0QixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3RELGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2QsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxXQUFXLENBQUMsQ0FBQztZQUNoQixPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FDbkIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDcEIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxZQUFZLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FDcEIsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssV0FBVyxDQUFDLENBQUM7WUFDaEIsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ25CLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDdEQsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxVQUFVLENBQUMsQ0FBQztZQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUNmLGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDOUQsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN0RCxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnRXF1YWwnOiB7XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5lcXVhbChcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdOb3RFcXVhbCc6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLm5vdEVxdWFsKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0dyZWF0ZXInOiB7XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5ncmVhdGVyKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0dyZWF0ZXJFcXVhbCc6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmdyZWF0ZXJFcXVhbChcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdMZXNzJzoge1xuICAgICAgICAgIHJldHVybiBbdGZPcHMubGVzcyhcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdMZXNzRXF1YWwnOiB7XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5sZXNzRXF1YWwoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2EnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnTG9naWNhbEFuZCc6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmxvZ2ljYWxBbmQoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2EnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnTG9naWNhbE5vdCc6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmxvZ2ljYWxOb3QoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2EnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0xvZ2ljYWxPcic6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmxvZ2ljYWxPcihcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTZWxlY3QnOlxuICAgICAgICBjYXNlICdTZWxlY3RWMic6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLndoZXJlKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdjb25kaXRpb24nLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ2xvZ2ljYWwnO1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n            return [tfOps.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];\n        case 'Einsum':\n            return [tfOps.einsum(getParamValue('equation', node, tensorMap, context), ...getParamValue('tensors', node, tensorMap, context))];\n        case 'Transpose':\n            return [tfOps.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];\n        case '_FusedMatMul':\n            const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n            const isBiasAdd = extraOp === 'biasadd';\n            const isPrelu = activationFunc === 'prelu';\n            const numArgs = getParamValue('numArgs', node, tensorMap, context);\n            const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n            if (isBiasAdd) {\n                if (isPrelu && numArgs !== 2) {\n                    throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' +\n                        'extra arguments: bias and alpha.');\n                }\n                if (!isPrelu && numArgs !== 1) {\n                    throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');\n                }\n            }\n            const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n            return [tfOps.fused.matMul({\n                    a: getParamValue('a', node, tensorMap, context),\n                    b: getParamValue('b', node, tensorMap, context),\n                    transposeA: getParamValue('transposeA', node, tensorMap, context),\n                    transposeB: getParamValue('transposeB', node, tensorMap, context),\n                    bias: biasArg,\n                    activation: activationFunc,\n                    preluActivationWeights: preluArg,\n                    leakyreluAlpha\n                })];\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'matrices';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n            return [tfOps.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'FusedBatchNormV3': {\n            return [tfOps.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n        }\n        case 'LRN': {\n            return [tfOps.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];\n        }\n        case 'Softmax': {\n            return [tfOps.softmax(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'LogSoftmax': {\n            return [tfOps.logSoftmax(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'SparseToDense': {\n            return [tfOps.sparseToDense(getParamValue('sparseIndices', node, tensorMap, context), getParamValue('outputShape', node, tensorMap, context), getParamValue('sparseValues', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'normalization';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXphdGlvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9vcGVyYXRpb25zL2V4ZWN1dG9ycy9ub3JtYWxpemF0aW9uX2V4ZWN1dG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUdILGlEQUFpRDtBQUNqRCxPQUFPLEtBQUssS0FBSyxNQUFNLGtEQUFrRCxDQUFDO0FBTTFFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFdEMsTUFBTSxDQUFDLE1BQU0sU0FBUyxHQUNsQixDQUFDLElBQVUsRUFBRSxTQUEwQixFQUN0QyxPQUF5QixFQUFZLEVBQUU7SUFDdEMsUUFBUSxJQUFJLENBQUMsRUFBRSxFQUFFO1FBQ2YsS0FBSyxnQkFBZ0IsQ0FBQztRQUN0QixLQUFLLGtCQUFrQixDQUFDLENBQUM7WUFDdkIsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQ25CLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDdEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzdELGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDM0QsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUMxRCxhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUNuQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ3RELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzNELGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDMUQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUNwRTtRQUNELEtBQUssS0FBSyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLDBCQUEwQixDQUNwQyxhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUMvQixFQUNaLGFBQWEsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDM0QsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUN6RCxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzFELGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDakU7UUFDRCxLQUFLLFNBQVMsQ0FBQyxDQUFDO1lBQ2QsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQ2pCLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLFlBQVksQ0FBQyxDQUFDO1lBQ2pCLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUNwQixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxlQUFlLENBQUMsQ0FBQztZQUNwQixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FDdkIsYUFBYSxDQUFDLGVBQWUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDN0MsRUFDVixhQUFhLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQ2hFLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQzFDLEVBQ1osYUFBYSxDQUFDLGNBQWMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDNUMsQ0FBQyxDQUFDLENBQUM7U0FDbEI7UUFDRDtZQUNFLE1BQU0sU0FBUyxDQUFDLGFBQWEsSUFBSSxDQUFDLEVBQUUscUJBQXFCLENBQUMsQ0FBQztLQUM5RDtBQUNILENBQUMsQ0FBQztBQUVOLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBRyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7U2NhbGFyLCBUZW5zb3IsIFRlbnNvcjNELCBUZW5zb3I0RH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnRnVzZWRCYXRjaE5vcm0nOlxuICAgICAgICBjYXNlICdGdXNlZEJhdGNoTm9ybVYyJzoge1xuICAgICAgICAgIHJldHVybiBbdGZPcHMuYmF0Y2hOb3JtKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ21lYW4nLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgndmFyaWFuY2UnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnb2Zmc2V0Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NjYWxlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2Vwc2lsb24nLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ0Z1c2VkQmF0Y2hOb3JtVjMnOiB7XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5iYXRjaE5vcm0oXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbWVhbicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd2YXJpYW5jZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdvZmZzZXQnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnc2NhbGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZXBzaWxvbicsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnTFJOJzoge1xuICAgICAgICAgIHJldHVybiBbdGZPcHMubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24oXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjNEIHxcbiAgICAgICAgICAgICAgICAgIFRlbnNvcjRELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyYWRpdXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIG51bWJlcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnYmlhcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdhbHBoYScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdiZXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTb2Z0bWF4Jzoge1xuICAgICAgICAgIHJldHVybiBbdGZPcHMuc29mdG1heChcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnTG9nU29mdG1heCc6IHtcbiAgICAgICAgICByZXR1cm4gW3RmT3BzLmxvZ1NvZnRtYXgoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NwYXJzZVRvRGVuc2UnOiB7XG4gICAgICAgICAgcmV0dXJuIFt0Zk9wcy5zcGFyc2VUb0RlbnNlKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzcGFyc2VJbmRpY2VzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdvdXRwdXRTaGFwZScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzcGFyc2VWYWx1ZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVmYXVsdFZhbHVlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgU2NhbGFyKV07XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBUeXBlRXJyb3IoYE5vZGUgdHlwZSAke25vZGUub3B9IGlzIG5vdCBpbXBsZW1lbnRlZGApO1xuICAgICAgfVxuICAgIH07XG5cbmV4cG9ydCBjb25zdCBDQVRFR09SWSA9ICdub3JtYWxpemF0aW9uJztcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Max': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Mean': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Min': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Sum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'All': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Any': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'ArgMax': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'ArgMin': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Prod': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const keepDims = getParamValue('keepDims', node, tensorMap, context);\n            return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n        }\n        case 'Cumsum': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const exclusive = getParamValue('exclusive', node, tensorMap, context);\n            const reverse = getParamValue('reverse', node, tensorMap, context);\n            return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n        }\n        case 'Bincount':\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const weights = getParamValue('weights', node, tensorMap, context);\n            const size = getParamValue('size', node, tensorMap, context);\n            const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n            return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'reduction';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'ConcatV2':\n        case 'Concat': {\n            const n = getParamValue('n', node, tensorMap, context);\n            const axis = getParamValue('axis', node, tensorMap, context);\n            let inputs = getParamValue('tensors', node, tensorMap, context);\n            inputs = inputs.slice(0, n);\n            return [tfOps.concat(inputs, axis)];\n        }\n        case 'Gather': {\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), 0)];\n        }\n        case 'GatherV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const batchDims = getParamValue('batchDims', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gather(input, tfOps.cast(indices, 'int32'), axis, batchDims)];\n        }\n        case 'Reverse': {\n            const dims = getParamValue('dims', node, tensorMap, context);\n            const axis = [];\n            for (let i = 0; i < dims.length; i++) {\n                if (dims[i]) {\n                    axis.push(i);\n                }\n            }\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'ReverseV2': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const input = getParamValue('x', node, tensorMap, context);\n            return [tfOps.reverse(input, axis)];\n        }\n        case 'Slice': {\n            // tslint:disable-next-line:no-any\n            const begin = getParamValue('begin', node, tensorMap, context);\n            // tslint:disable-next-line:no-any\n            const size = getParamValue('size', node, tensorMap, context);\n            return [tfOps.slice(getParamValue('x', node, tensorMap, context), begin, size)];\n        }\n        case 'StridedSlice': {\n            const begin = getParamValue('begin', node, tensorMap, context);\n            const end = getParamValue('end', node, tensorMap, context);\n            const strides = getParamValue('strides', node, tensorMap, context);\n            const beginMask = getParamValue('beginMask', node, tensorMap, context);\n            const endMask = getParamValue('endMask', node, tensorMap, context);\n            const ellipsisMask = getParamValue('ellipsisMask', node, tensorMap, context);\n            const newAxisMask = getParamValue('newAxisMask', node, tensorMap, context);\n            const shrinkAxisMask = getParamValue('shrinkAxisMask', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return [tfOps.stridedSlice(tensor, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask)];\n        }\n        case 'Pack': {\n            return tidy(() => {\n                const axis = getParamValue('axis', node, tensorMap, context);\n                const tensors = getParamValue('tensors', node, tensorMap, context);\n                // Reshape the tensors to the first tensor's shape if they don't\n                // match.\n                const shape = tensors[0].shape;\n                const squeezedShape = tfOps.squeeze(tensors[0]).shape;\n                const mapped = tensors.map(tensor => {\n                    const sameShape = util.arraysEqual(tensor.shape, shape);\n                    if (!sameShape &&\n                        !util.arraysEqual(tfOps.squeeze(tensor).shape, squeezedShape)) {\n                        throw new Error('the input tensors shape does not match');\n                    }\n                    return sameShape ? tensor : tfOps.reshape(tensor, shape);\n                });\n                return [tfOps.stack(mapped, axis)];\n            });\n        }\n        case 'Unpack': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const tensor = getParamValue('tensor', node, tensorMap, context);\n            return tfOps.unstack(tensor, axis);\n        }\n        case 'Tile': {\n            const reps = getParamValue('reps', node, tensorMap, context);\n            return [tfOps.tile(getParamValue('x', node, tensorMap, context), reps)];\n        }\n        case 'Split':\n        case 'SplitV': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            const numOrSizeSplits = getParamValue('numOrSizeSplits', node, tensorMap, context);\n            const tensor = getParamValue('x', node, tensorMap, context);\n            return tfOps.split(tensor, numOrSizeSplits, axis);\n        }\n        case 'ScatterNd': {\n            const indices = getParamValue('indices', node, tensorMap, context);\n            const values = getParamValue('values', node, tensorMap, context);\n            const shape = getParamValue('shape', node, tensorMap, context);\n            return [tfOps.scatterND(indices, values, shape)];\n        }\n        case 'GatherNd': {\n            const x = getParamValue('x', node, tensorMap, context);\n            const indices = getParamValue('indices', node, tensorMap, context);\n            return [tfOps.gatherND(x, indices)];\n        }\n        case 'SparseToDense': {\n            const indices = getParamValue('sparseIndices', node, tensorMap, context);\n            const shape = getParamValue('outputShape', node, tensorMap, context);\n            const sparseValues = getParamValue('sparseValues', node, tensorMap, context);\n            const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n            return [tfOps.sparseToDense(indices, sparseValues, shape, sparseValues.dtype === defaultValue.dtype ?\n                    defaultValue :\n                    tfOps.cast(defaultValue, sparseValues.dtype))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'slice_join';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'SparseFillEmptyRows': {\n            const { outputIndices, outputValues, emptyRowIndicator, reverseIndexMap } = tfOps.sparse.sparseFillEmptyRows(getParamValue('indices', node, tensorMap, context), getParamValue('values', node, tensorMap, context), getParamValue('denseShape', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context));\n            return [\n                outputIndices, outputValues, emptyRowIndicator, reverseIndexMap\n            ];\n        }\n        case 'SparseReshape': {\n            const { outputIndices, outputShape } = tfOps.sparse.sparseReshape(getParamValue('inputIndices', node, tensorMap, context), getParamValue('inputShape', node, tensorMap, context), getParamValue('newShape', node, tensorMap, context));\n            return [outputIndices, outputShape];\n        }\n        case 'SparseSegmentMean': {\n            const outputData = tfOps.sparse.sparseSegmentMean(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        case 'SparseSegmentSum': {\n            const outputData = tfOps.sparse.sparseSegmentSum(getParamValue('data', node, tensorMap, context), getParamValue('indices', node, tensorMap, context), getParamValue('segmentIds', node, tensorMap, context));\n            return [outputData];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'sparse';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BhcnNlX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3NwYXJzZV9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBWSxFQUFFO0lBQ3RDLFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUsscUJBQXFCLENBQUMsQ0FBQztZQUMxQixNQUFNLEVBQ0osYUFBYSxFQUNiLFlBQVksRUFDWixpQkFBaUIsRUFDakIsZUFBZSxFQUNoQixHQUNHLEtBQUssQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQzVCLGFBQWEsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQ3JDLEVBQ1osYUFBYSxDQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUM3RCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN4QyxFQUNaLGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQzVDLENBQUMsQ0FBQztZQUNwQixPQUFPO2dCQUNMLGFBQWEsRUFBRSxZQUFZLEVBQUUsaUJBQWlCLEVBQUUsZUFBZTthQUNoRSxDQUFDO1NBQ0g7UUFDRCxLQUFLLGVBQWUsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sRUFBQyxhQUFhLEVBQUUsV0FBVyxFQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQzNELGFBQWEsQ0FBQyxjQUFjLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQzFDLEVBQ1osYUFBYSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUNqRSxhQUFhLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFhLENBQUMsQ0FBQztZQUNyRSxPQUFPLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsS0FBSyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ3hCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQzdDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUM5RCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN4QyxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0QsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO1lBQ3ZCLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQzVDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDekQsYUFBYSxDQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUM5RCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUN4QyxDQUFDLENBQUM7WUFDbEIsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ3JCO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1NjYWxhciwgVGVuc29yLCBUZW5zb3IxRCwgVGVuc29yMkR9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWltcG9ydHMtZnJvbS1kaXN0XG5pbXBvcnQgKiBhcyB0Zk9wcyBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUvZGlzdC9vcHMvb3BzX2Zvcl9jb252ZXJ0ZXInO1xuXG5pbXBvcnQge05hbWVkVGVuc29yc01hcH0gZnJvbSAnLi4vLi4vZGF0YS90eXBlcyc7XG5pbXBvcnQge0V4ZWN1dGlvbkNvbnRleHR9IGZyb20gJy4uLy4uL2V4ZWN1dG9yL2V4ZWN1dGlvbl9jb250ZXh0JztcbmltcG9ydCB7SW50ZXJuYWxPcEV4ZWN1dG9yLCBOb2RlfSBmcm9tICcuLi90eXBlcyc7XG5cbmltcG9ydCB7Z2V0UGFyYW1WYWx1ZX0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBjb25zdCBleGVjdXRlT3A6IEludGVybmFsT3BFeGVjdXRvciA9XG4gICAgKG5vZGU6IE5vZGUsIHRlbnNvck1hcDogTmFtZWRUZW5zb3JzTWFwLFxuICAgICBjb250ZXh0OiBFeGVjdXRpb25Db250ZXh0KTogVGVuc29yW10gPT4ge1xuICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgIGNhc2UgJ1NwYXJzZUZpbGxFbXB0eVJvd3MnOiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgb3V0cHV0SW5kaWNlcyxcbiAgICAgICAgICAgIG91dHB1dFZhbHVlcyxcbiAgICAgICAgICAgIGVtcHR5Um93SW5kaWNhdG9yLFxuICAgICAgICAgICAgcmV2ZXJzZUluZGV4TWFwXG4gICAgICAgICAgfSA9XG4gICAgICAgICAgICAgIHRmT3BzLnNwYXJzZS5zcGFyc2VGaWxsRW1wdHlSb3dzKFxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5kaWNlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgICAgICBUZW5zb3IyRCxcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3ZhbHVlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQsXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkZW5zZVNoYXBlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgICAgIFRlbnNvcjFELFxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVmYXVsdFZhbHVlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgICAgIFNjYWxhcik7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIG91dHB1dEluZGljZXMsIG91dHB1dFZhbHVlcywgZW1wdHlSb3dJbmRpY2F0b3IsIHJldmVyc2VJbmRleE1hcFxuICAgICAgICAgIF07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3BhcnNlUmVzaGFwZSc6IHtcbiAgICAgICAgICBjb25zdCB7b3V0cHV0SW5kaWNlcywgb3V0cHV0U2hhcGV9ID0gdGZPcHMuc3BhcnNlLnNwYXJzZVJlc2hhcGUoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0SW5kaWNlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXNcbiAgICAgICAgICAgICAgICAgIFRlbnNvcjJELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dFNoYXBlJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbmV3U2hhcGUnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFEKTtcbiAgICAgICAgICByZXR1cm4gW291dHB1dEluZGljZXMsIG91dHB1dFNoYXBlXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTcGFyc2VTZWdtZW50TWVhbic6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXREYXRhID0gdGZPcHMuc3BhcnNlLnNwYXJzZVNlZ21lbnRNZWFuKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2luZGljZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcjFELFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZWdtZW50SWRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhc1xuICAgICAgICAgICAgICAgICAgVGVuc29yMUQpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0RGF0YV07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU3BhcnNlU2VnbWVudFN1bSc6IHtcbiAgICAgICAgICBjb25zdCBvdXRwdXREYXRhID0gdGZPcHMuc3BhcnNlLnNwYXJzZVNlZ21lbnRTdW0oXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2RhdGEnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcixcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnaW5kaWNlcycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yMUQsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NlZ21lbnRJZHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBUZW5zb3IxRCk7XG4gICAgICAgICAgcmV0dXJuIFtvdXRwdXREYXRhXTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ3NwYXJzZSc7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'FFT': {\n            return [tfOps.fft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IFFT': {\n            return [tfOps.ifft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'RFFT': {\n            return [tfOps.rfft(getParamValue('x', node, tensorMap, context))];\n        }\n        case 'IRFFT': {\n            return [tfOps.irfft(getParamValue('x', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'spectral';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY3RyYWxfZXhlY3V0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWNvbnZlcnRlci9zcmMvb3BlcmF0aW9ucy9leGVjdXRvcnMvc3BlY3RyYWxfZXhlY3V0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBR0gsaURBQWlEO0FBQ2pELE9BQU8sS0FBSyxLQUFLLE1BQU0sa0RBQWtELENBQUM7QUFNMUUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQ2xCLENBQUMsSUFBVSxFQUFFLFNBQTBCLEVBQUUsT0FBeUIsRUFDckQsRUFBRTtJQUNULFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssS0FBSyxDQUFDLENBQUM7WUFDVixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FDYixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0QsS0FBSyxNQUFNLENBQUMsQ0FBQztZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUNkLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsQ0FBQyxDQUFDLENBQUM7U0FDOUQ7UUFDRCxLQUFLLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2QsYUFBYSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUMsQ0FBQztTQUM5RDtRQUNELEtBQUssT0FBTyxDQUFDLENBQUM7WUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDZixhQUFhLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLENBQUMsQ0FBQyxDQUFDO1NBQzlEO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFVixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1RlbnNvcn0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOlxuICAgICAgICBUZW5zb3JbXSA9PiB7XG4gICAgICAgICAgc3dpdGNoIChub2RlLm9wKSB7XG4gICAgICAgICAgICBjYXNlICdGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbdGZPcHMuZmZ0KFxuICAgICAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgneCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yKV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdJRkZUJzoge1xuICAgICAgICAgICAgICByZXR1cm4gW3RmT3BzLmlmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ1JGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbdGZPcHMucmZmdChcbiAgICAgICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3gnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIFRlbnNvcildO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnSVJGRlQnOiB7XG4gICAgICAgICAgICAgIHJldHVybiBbdGZPcHMuaXJmZnQoXG4gICAgICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCd4Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuXG5leHBvcnQgY29uc3QgQ0FURUdPUlkgPSAnc3BlY3RyYWwnO1xuIl19","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'StringNGrams': {\n            const { nGrams, nGramsSplits } = tfOps.string.stringNGrams(getParamValue('data', node, tensorMap, context), getParamValue('dataSplits', node, tensorMap, context), getParamValue('separator', node, tensorMap, context), getParamValue('nGramWidths', node, tensorMap, context), getParamValue('leftPad', node, tensorMap, context), getParamValue('rightPad', node, tensorMap, context), getParamValue('padWidth', node, tensorMap, context), getParamValue('preserveShortSequences', node, tensorMap, context));\n            return [nGrams, nGramsSplits];\n        }\n        case 'StringSplit': {\n            const { indices, values, shape } = tfOps.string.stringSplit(getParamValue('input', node, tensorMap, context), getParamValue('delimiter', node, tensorMap, context), getParamValue('skipEmpty', node, tensorMap, context));\n            return [indices, values, shape];\n        }\n        case 'StringToHashBucketFast': {\n            const output = tfOps.string.stringToHashBucketFast(getParamValue('input', node, tensorMap, context), getParamValue('numBuckets', node, tensorMap, context));\n            return [output];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'string';\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX2V4ZWN1dG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL29wZXJhdGlvbnMvZXhlY3V0b3JzL3N0cmluZ19leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFHSCxpREFBaUQ7QUFDakQsT0FBTyxLQUFLLEtBQUssTUFBTSxrREFBa0QsQ0FBQztBQU0xRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sU0FBUyxDQUFDO0FBRXRDLE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FDbEIsQ0FBQyxJQUFVLEVBQUUsU0FBMEIsRUFDdEMsT0FBeUIsRUFBWSxFQUFFO0lBQ3RDLFFBQVEsSUFBSSxDQUFDLEVBQUUsRUFBRTtRQUNmLEtBQUssY0FBYyxDQUFDLENBQUM7WUFDbkIsTUFBTSxFQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FDcEQsYUFBYSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUMzRCxhQUFhLENBQUMsWUFBWSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQy9ELGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDOUQsYUFBYSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FDekMsRUFDWixhQUFhLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzVELGFBQWEsQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDN0QsYUFBYSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxFQUM3RCxhQUFhLENBQ1Qsd0JBQXdCLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQzNDLENBQUMsQ0FBQztZQUNqQixPQUFPLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO1NBQy9CO1FBQ0QsS0FBSyxhQUFhLENBQUMsQ0FBQztZQUNsQixNQUFNLEVBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FDckQsYUFBYSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBYSxFQUM1RCxhQUFhLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFXLEVBQzlELGFBQWEsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVksQ0FBQyxDQUFDO1lBQ3JFLE9BQU8sQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2pDO1FBQ0QsS0FBSyx3QkFBd0IsQ0FBQyxDQUFDO1lBQzdCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsc0JBQXNCLENBQzlDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQVcsRUFDMUQsYUFBYSxDQUFDLFlBQVksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBVyxDQUFDLENBQUM7WUFDckUsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2pCO1FBQ0Q7WUFDRSxNQUFNLFNBQVMsQ0FBQyxhQUFhLElBQUksQ0FBQyxFQUFFLHFCQUFxQixDQUFDLENBQUM7S0FDOUQ7QUFDSCxDQUFDLENBQUM7QUFFTixNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5pbXBvcnQge1NjYWxhciwgVGVuc29yLCBUZW5zb3IxRH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8taW1wb3J0cy1mcm9tLWRpc3RcbmltcG9ydCAqIGFzIHRmT3BzIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L29wcy9vcHNfZm9yX2NvbnZlcnRlcic7XG5cbmltcG9ydCB7TmFtZWRUZW5zb3JzTWFwfSBmcm9tICcuLi8uLi9kYXRhL3R5cGVzJztcbmltcG9ydCB7RXhlY3V0aW9uQ29udGV4dH0gZnJvbSAnLi4vLi4vZXhlY3V0b3IvZXhlY3V0aW9uX2NvbnRleHQnO1xuaW1wb3J0IHtJbnRlcm5hbE9wRXhlY3V0b3IsIE5vZGV9IGZyb20gJy4uL3R5cGVzJztcblxuaW1wb3J0IHtnZXRQYXJhbVZhbHVlfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGNvbnN0IGV4ZWN1dGVPcDogSW50ZXJuYWxPcEV4ZWN1dG9yID1cbiAgICAobm9kZTogTm9kZSwgdGVuc29yTWFwOiBOYW1lZFRlbnNvcnNNYXAsXG4gICAgIGNvbnRleHQ6IEV4ZWN1dGlvbkNvbnRleHQpOiBUZW5zb3JbXSA9PiB7XG4gICAgICBzd2l0Y2ggKG5vZGUub3ApIHtcbiAgICAgICAgY2FzZSAnU3RyaW5nTkdyYW1zJzoge1xuICAgICAgICAgIGNvbnN0IHtuR3JhbXMsIG5HcmFtc1NwbGl0c30gPSB0Zk9wcy5zdHJpbmcuc3RyaW5nTkdyYW1zKFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdkYXRhJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGF0YVNwbGl0cycsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdzZXBhcmF0b3InLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzIHN0cmluZyxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbkdyYW1XaWR0aHMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBudW1iZXJbXSxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnbGVmdFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdyaWdodFBhZCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgc3RyaW5nLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdwYWRXaWR0aCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgbnVtYmVyLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKFxuICAgICAgICAgICAgICAgICAgJ3ByZXNlcnZlU2hvcnRTZXF1ZW5jZXMnLCBub2RlLCB0ZW5zb3JNYXAsIGNvbnRleHQpIGFzXG4gICAgICAgICAgICAgICAgICBib29sZWFuKTtcbiAgICAgICAgICByZXR1cm4gW25HcmFtcywgbkdyYW1zU3BsaXRzXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdTcGxpdCc6IHtcbiAgICAgICAgICBjb25zdCB7aW5kaWNlcywgdmFsdWVzLCBzaGFwZX0gPSB0Zk9wcy5zdHJpbmcuc3RyaW5nU3BsaXQoXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ2lucHV0Jywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBUZW5zb3IxRCxcbiAgICAgICAgICAgICAgZ2V0UGFyYW1WYWx1ZSgnZGVsaW1pdGVyJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBTY2FsYXIsXG4gICAgICAgICAgICAgIGdldFBhcmFtVmFsdWUoJ3NraXBFbXB0eScsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgYm9vbGVhbik7XG4gICAgICAgICAgcmV0dXJuIFtpbmRpY2VzLCB2YWx1ZXMsIHNoYXBlXTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdTdHJpbmdUb0hhc2hCdWNrZXRGYXN0Jzoge1xuICAgICAgICAgIGNvbnN0IG91dHB1dCA9IHRmT3BzLnN0cmluZy5zdHJpbmdUb0hhc2hCdWNrZXRGYXN0KFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdpbnB1dCcsIG5vZGUsIHRlbnNvck1hcCwgY29udGV4dCkgYXMgVGVuc29yLFxuICAgICAgICAgICAgICBnZXRQYXJhbVZhbHVlKCdudW1CdWNrZXRzJywgbm9kZSwgdGVuc29yTWFwLCBjb250ZXh0KSBhcyBudW1iZXIpO1xuICAgICAgICAgIHJldHVybiBbb3V0cHV0XTtcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IFR5cGVFcnJvcihgTm9kZSB0eXBlICR7bm9kZS5vcH0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICB9XG4gICAgfTtcblxuZXhwb3J0IGNvbnN0IENBVEVHT1JZID0gJ3N0cmluZyc7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n    switch (node.op) {\n        case 'Cast': {\n            return [tfOps.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n        }\n        case 'ExpandDims': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Squeeze': {\n            const axis = getParamValue('axis', node, tensorMap, context);\n            return [tfOps.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n        }\n        case 'Reshape': {\n            return [tfOps.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'MirrorPad': {\n            return [tfOps.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n        }\n        case 'PadV2':\n        case 'Pad': {\n            return [tfOps.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n        }\n        case 'SpaceToBatchND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const paddings = getParamValue('paddings', node, tensorMap, context);\n            return [tfOps.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n            const blockShape = getParamValue('blockShape', node, tensorMap, context);\n            const crops = getParamValue('crops', node, tensorMap, context);\n            return [tfOps.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n            const blockSize = getParamValue('blockSize', node, tensorMap, context);\n            const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n            return [tfOps.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n            return [tfOps.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n        }\n        case 'BroadcastArgs': {\n            return [tfOps.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n        }\n        default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n    }\n};\nexport const CATEGORY = 'transformation';\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(node, tensorMap, context, resourceManager) {\n    const value = ((node, tensorMap, context) => {\n        switch (node.category) {\n            case 'arithmetic':\n                return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n            case 'basic_math':\n                return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n            case 'control':\n                return control.executeOp(node, tensorMap, context);\n            case 'convolution':\n                return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n            case 'creation':\n                return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n            case 'dynamic':\n                return dynamic.executeOp(node, tensorMap, context);\n            case 'evaluation':\n                return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n            case 'image':\n                return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n            case 'graph':\n                return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n            case 'logical':\n                return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n            case 'matrices':\n                return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n            case 'normalization':\n                return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n            case 'reduction':\n                return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n            case 'slice_join':\n                return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n            case 'sparse':\n                return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n            case 'spectral':\n                return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n            case 'string':\n                return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n            case 'transformation':\n                return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n            case 'hash_table':\n                return hashTable.executeOp(node, tensorMap, context, resourceManager);\n            case 'custom':\n                const opMapper = getRegisteredOp(node.op);\n                if (opMapper && opMapper.customExecutor) {\n                    return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n                }\n                else {\n                    throw TypeError(`Custom op ${node.op} is not registered.`);\n                }\n            default:\n                throw TypeError(`Unknown op '${node.op}'. File an issue at ` +\n                    `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                    `, or register a custom execution with tf.registerOp()`);\n        }\n    })(node, tensorMap, context);\n    if (tfc.util.isPromise(value)) {\n        return value.then((data) => [].concat(data));\n    }\n    return [].concat(value);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n    constructor(weightMap = {}, tensorArrayMap = {}, tensorListMap = {}, functionMap = {}) {\n        this.weightMap = weightMap;\n        this.tensorArrayMap = tensorArrayMap;\n        this.tensorListMap = tensorListMap;\n        this.functionMap = functionMap;\n        this.rootContext = { id: 0, frameName: '', iterationId: 0 };\n        this.contexts = [this.rootContext];\n        this.lastId = 0;\n        this.generateCurrentContextIds();\n    }\n    newFrame(id, frameName) {\n        return { id, frameName, iterationId: 0 };\n    }\n    /**\n     * Set the current context\n     * @param contexts: ExecutionContextInfo[] the current path of execution\n     * frames\n     */\n    set currentContext(contexts) {\n        if (this.contexts !== contexts) {\n            this.contexts = contexts;\n            this.generateCurrentContextIds();\n        }\n    }\n    get currentContext() {\n        return this.contexts;\n    }\n    /**\n     * Returns the current context in string format.\n     */\n    get currentContextId() {\n        return this._currentContextIds[0];\n    }\n    /**\n     * Returns the current context and all parent contexts in string format.\n     * This allow access to the nodes in the current and parent frames.\n     */\n    get currentContextIds() {\n        return this._currentContextIds;\n    }\n    generateCurrentContextIds() {\n        const names = [];\n        for (let i = 0; i < this.contexts.length - 1; i++) {\n            const contexts = this.contexts.slice(0, this.contexts.length - i);\n            names.push(this.contextIdforContexts(contexts));\n        }\n        names.push('');\n        this._currentContextIds = names;\n    }\n    contextIdforContexts(contexts) {\n        return contexts ?\n            contexts\n                .map(context => (context.id === 0 && context.iterationId === 0) ?\n                '' :\n                `${context.frameName}-${context.iterationId}`)\n                .join('/') :\n            '';\n    }\n    /**\n     * Enter a new frame, a new context is pushed on the current context list.\n     * @param frameId new frame id\n     */\n    enterFrame(frameId) {\n        if (this.contexts) {\n            this.lastId++;\n            this.contexts = this.contexts.slice();\n            this.contexts.push(this.newFrame(this.lastId, frameId));\n            this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n        }\n    }\n    /**\n     * Exit the current frame, the last context is removed from the current\n     * context list.\n     */\n    exitFrame() {\n        if (this.contexts && this.contexts.length > 1) {\n            this.contexts = this.contexts.slice();\n            this.contexts.splice(-1);\n            this.currentContextIds.shift();\n        }\n        else {\n            throw new Error('Cannot exit frame, the context is empty');\n        }\n    }\n    /**\n     * Enter the next iteration of a loop, the iteration id of last context is\n     * increased.\n     */\n    nextIteration() {\n        if (this.contexts && this.contexts.length > 0) {\n            this.contexts = this.contexts.slice();\n            this.lastId++;\n            const context = Object.assign({}, this.contexts[this.contexts.length - 1]);\n            context.iterationId += 1;\n            context.id = this.lastId;\n            this.contexts.splice(-1, 1, context);\n            this._currentContextIds.splice(0, 1, this.contextIdforContexts(this.contexts));\n        }\n        else {\n            throw new Error('Cannot increase frame iteration, the context is empty');\n        }\n    }\n    getWeight(name) {\n        return this.weightMap[name];\n    }\n    addTensorArray(tensorArray) {\n        this.tensorArrayMap[tensorArray.id] = tensorArray;\n    }\n    getTensorArray(id) {\n        return this.tensorArrayMap[id];\n    }\n    addTensorList(tensorList) {\n        this.tensorListMap[tensorList.id] = tensorList;\n    }\n    getTensorList(id) {\n        return this.tensorListMap[id];\n    }\n    dispose(keepIds) {\n        for (const key in this.tensorArrayMap) {\n            this.tensorArrayMap[key].clearAndClose(keepIds);\n        }\n        for (const key in this.tensorListMap) {\n            this.tensorListMap[key].clearAndClose(keepIds);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n    const usedNodes = new Set();\n    const missingInputs = [];\n    let dynamicNode = null;\n    let syncInputs = null;\n    // Start with the outputs, going backwards and find all the nodes that are\n    // needed to compute those outputs.\n    const seen = new Set();\n    const inputNodeNames = Object.keys(inputs).map(name => parseNodeName(name)[0]);\n    let initNodeNames = [];\n    if (initNodes != null) {\n        initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n    }\n    const frontier = [...outputs];\n    while (frontier.length > 0) {\n        const node = frontier.pop();\n        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n            if (dynamicNode == null) {\n                dynamicNode = node;\n                syncInputs = dynamicNode.children.map(child => child.name)\n                    .filter(name => usedNodes.has(name));\n            }\n        }\n        usedNodes.add(node.name);\n        // Weights are dead end since we already have their values.\n        if (weightMap[node.name] != null) {\n            continue;\n        }\n        // This node is a dead end since it's one of the user-provided inputs.\n        if (inputNodeNames.indexOf(node.name) !== -1) {\n            continue;\n        }\n        // This node is a dead end since it doesn't have any inputs.\n        if (initNodeNames.indexOf(node.name) !== -1) {\n            continue;\n        }\n        if (node.inputs.length === 0) {\n            missingInputs.push(node.name);\n            continue;\n        }\n        node.inputs.forEach(input => {\n            // Don't add to the frontier if it is already there.\n            if (seen.has(input.name)) {\n                return;\n            }\n            seen.add(input.name);\n            frontier.push(input);\n        });\n    }\n    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {\n    const { usedNodes, inputs } = executionInfo;\n    const frontier = [];\n    const inputNodes = Object.keys(inputs)\n        .map(name => parseNodeName(name)[0])\n        .map(name => graph.nodes[name]);\n    const initNodes = graph.initNodes;\n    inputNodes.forEach(input => {\n        if (usedNodes.has(input.name)) {\n            frontier.push(input);\n        }\n    });\n    graph.weights.forEach(weight => {\n        if (usedNodes.has(weight.name)) {\n            frontier.push(weight);\n        }\n    });\n    if (initNodes != null) {\n        initNodes.forEach(node => {\n            if (usedNodes.has(node.name)) {\n                frontier.push(node);\n            }\n        });\n    }\n    const seen = new Set();\n    const orderedNodes = [];\n    while (frontier.length > 0) {\n        const node = frontier.pop();\n        seen.add(node.name);\n        if (!weightMap[node.name]) {\n            orderedNodes.push(node);\n        }\n        node.children.forEach(child => {\n            if (!seen.has(child.name) && usedNodes.has(child.name) &&\n                child.inputs.every(input => seen.has(input.name))) {\n                frontier.push(child);\n            }\n        });\n    }\n    return orderedNodes;\n}\nconst CONTROL_FLOW_OPS = [\n    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n    'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n    'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\nexport function isControlFlow(node) {\n    return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\nexport function isDynamicShape(node) {\n    return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\nexport function isHashTable(node) {\n    return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName } from '../operations/executors/utils';\nimport { executeOp } from '../operations/operation_executor';\nimport { ExecutionContext } from './execution_context';\nimport { getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow } from './model_analysis';\nexport class GraphExecutor {\n    /**\n     *\n     * @param graph Graph the model or function graph to be executed.\n     * @param parent When building function exector you need to set the parent\n     * executor. Since the weights and function executor maps are set at parant\n     * level, that function executor can access the function maps and weight maps\n     * through the parent.\n     */\n    constructor(graph, parent) {\n        this.graph = graph;\n        this.parent = parent;\n        this.compiledMap = new Map();\n        this._weightMap = {};\n        this.SEPERATOR = ',';\n        this._functions = {};\n        this._functionExecutorMap = {};\n        this._outputs = graph.outputs;\n        this._inputs = graph.inputs;\n        this._initNodes = graph.initNodes;\n        this._signature = graph.signature;\n        this._functions = graph.functions;\n        // create sub-graph executors\n        if (graph.functions != null) {\n            Object.keys(graph.functions).forEach(name => {\n                this._functionExecutorMap[name] =\n                    new GraphExecutor(graph.functions[name], this);\n            });\n        }\n    }\n    get weightIds() {\n        return this.parent ? this.parent.weightIds : this._weightIds;\n    }\n    get functionExecutorMap() {\n        return this.parent ? this.parent.functionExecutorMap :\n            this._functionExecutorMap;\n    }\n    get weightMap() {\n        return this.parent ? this.parent.weightMap : this._weightMap;\n    }\n    set weightMap(weightMap) {\n        const weightIds = Object.keys(weightMap).map(key => weightMap[key].map(tensor => tensor.id));\n        this._weightIds = [].concat(...weightIds);\n        this._weightMap = weightMap;\n    }\n    /**\n     * Set `ResourceManager` shared by executors of a model.\n     * @param resourceManager: `ResourceManager` of the `GraphModel`.\n     */\n    set resourceManager(resourceManager) {\n        this._resourceManager = resourceManager;\n    }\n    get inputs() {\n        return this._inputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get outputs() {\n        return this._outputs.map(node => {\n            return {\n                name: node.name,\n                shape: node.attrParams['shape'] ?\n                    node.attrParams['shape'].value :\n                    undefined,\n                dtype: node.attrParams['dtype'] ?\n                    node.attrParams['dtype'].value :\n                    undefined\n            };\n        });\n    }\n    get inputNodes() {\n        return this._inputs.map(node => node.signatureKey || node.name);\n    }\n    get outputNodes() {\n        return this._outputs.map((node) => {\n            const name = node.signatureKey || node.name;\n            return node.defaultOutput ? (`${name}:${node.defaultOutput}`) : name;\n        });\n    }\n    get functions() {\n        return Object.keys(this._functions).reduce((map, key) => {\n            map[key] = this._functions[key].signature;\n            return map;\n        }, {});\n    }\n    getCompilationKey(inputs, outputs) {\n        const sortedInputs = inputs.map(node => node.name).sort();\n        const sortedOutputs = outputs.map(node => node.name).sort();\n        return sortedInputs.join(this.SEPERATOR) + '--' +\n            sortedOutputs.join(this.SEPERATOR);\n    }\n    /**\n     * Compiles the inference graph and returns the minimal set of nodes that are\n     * required for execution, in the correct execution order.\n     */\n    compile(inputs, outputs) {\n        const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap, this._initNodes);\n        const { missingInputs, dynamicNode, syncInputs } = executionInfo;\n        if (dynamicNode != null) {\n            throw new Error(`This execution contains the node '${dynamicNode.name}', which has ` +\n                `the dynamic op '${dynamicNode.op}'. Please use ` +\n                `model.executeAsync() instead. Alternatively, to avoid the ` +\n                `dynamic ops, specify the inputs [${syncInputs}]`);\n        }\n        if (missingInputs.length > 0) {\n            const outNames = outputs.map(n => n.name);\n            const inNames = Object.keys(inputs);\n            throw new Error(`Cannot compute the outputs [${outNames}] from the provided inputs ` +\n                `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n        }\n        return getNodesInTopologicalOrder(this.graph, this.weightMap, executionInfo);\n    }\n    /**\n     * Executes the inference for given input tensors.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model, if\n     * no outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     */\n    execute(inputs, outputs) {\n        inputs = this.mapInputs(inputs);\n        const names = Object.keys(inputs).sort();\n        this.checkInputs(inputs);\n        this.checkInputShapeAndType(inputs);\n        outputs = this.mapOutputs(outputs);\n        this.checkOutputs(outputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputs.map(name => parseNodeName(name)[0]);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n        // Do nothing if the compiled graph cache contains the input.\n        let orderedNodes = this.compiledMap.get(compilationKey);\n        if (orderedNodes == null) {\n            orderedNodes = this.compile(inputs, outputNodes);\n            this.compiledMap.set(compilationKey, orderedNodes);\n        }\n        const tensorArrayMap = {};\n        const tensorListMap = {};\n        return tidy(() => {\n            const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n            const tensorsMap = Object.assign({}, this.weightMap);\n            Object.keys(inputs).forEach(name => {\n                const [nodeName, index] = parseNodeName(name);\n                const tensors = [];\n                tensors[index] = inputs[name];\n                tensorsMap[nodeName] = tensors;\n            });\n            const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n            const intermediateTensorConsumerCount = {};\n            for (let i = 0; i < orderedNodes.length; i++) {\n                const node = orderedNodes[i];\n                if (!tensorsMap[node.name]) {\n                    const tensors = executeOp(node, tensorsMap, context, this._resourceManager);\n                    if (util.isPromise(tensors)) {\n                        throw new Error(`The execution of the op '${node.op}' returned a promise. ` +\n                            `Please use model.executeAsync() instead.`);\n                    }\n                    tensorsMap[node.name] = tensors;\n                    this.checkTensorForDisposal(node.name, node, tensorsMap, context, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount);\n                }\n            }\n            // dispose the context for the root executor\n            if (this.parent == null) {\n                context.dispose(tensorsToKeep);\n            }\n            return outputs.map(name => getTensor(name, tensorsMap, context));\n        });\n    }\n    getFrozenTensorIds(tensorMap) {\n        const ids = [].concat.apply([], Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n        return new Set(ids);\n    }\n    checkTensorForDisposal(nodeName, node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount) {\n        // Skip output nodes and any control flow nodes, since its dependency is\n        // tricky to track correctly.\n        if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n            return;\n        }\n        tensorMap[nodeName].forEach(tensor => {\n            if (tensor != null) {\n                intermediateTensorConsumerCount[tensor.id] =\n                    (intermediateTensorConsumerCount[tensor.id] || 0) +\n                        node.children.length;\n            }\n        });\n        node.inputs.forEach(input => {\n            // Skip any control flow nodes, since its dependency is tricky to track\n            // correctly.\n            if (input.category !== 'control') {\n                const tensors = getTensorsForCurrentContenxt(input.name, tensorMap, context);\n                if (tensors != null) {\n                    tensors.forEach(tensor => {\n                        if (tensor && !tensor.kept && !tensorsToKeep.has(tensor.id)) {\n                            const count = intermediateTensorConsumerCount[tensor.id];\n                            if (count === 1) {\n                                tensor.dispose();\n                                delete intermediateTensorConsumerCount[tensor.id];\n                            }\n                            else if (count != null) {\n                                // only intermediate nodes has count set, inputs and weights are\n                                // not.\n                                intermediateTensorConsumerCount[tensor.id]--;\n                            }\n                        }\n                    });\n                }\n            }\n        });\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     */\n    async executeAsync(inputs, outputs) {\n        return this._executeAsync(inputs, outputs);\n    }\n    /**\n     * Executes the inference for given input tensors in Async fashion.\n     * @param inputs Tensor map for the model inputs, keyed by the input node\n     * names.\n     * @param outputs Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     * @param isFunctionExecution Optional. Flag for executing a function.\n     * @param tensorArrayMap Optional, global TensorArray map by id. Used for\n     * function execution.\n     * @param tensorArrayMap Optinal global TensorList map by id. Used for\n     * function execution.\n     */\n    async _executeAsync(inputs, outputs, isFunctionExecution = false, tensorArrayMap = {}, tensorListMap = {}) {\n        if (!isFunctionExecution) {\n            inputs = this.mapInputs(inputs);\n            this.checkInputs(inputs);\n            this.checkInputShapeAndType(inputs);\n            outputs = this.mapOutputs(outputs);\n            this.checkOutputs(outputs);\n        }\n        const context = new ExecutionContext(this.weightMap, tensorArrayMap, tensorListMap, this.functionExecutorMap);\n        // Graph with control flow op requires runtime evaluation of the execution\n        // order, while without control flow the execution order is pre-determined\n        // in the compile method.\n        const tensorMap = await this.executeWithControlFlow(inputs, context, outputs, isFunctionExecution);\n        const results = outputs.map(name => getTensor(name, tensorMap, context));\n        // dispose all the intermediate tensors\n        const outputIds = results.map(t => t.id);\n        const inputIds = Object.keys(inputs).map(name => inputs[name].id);\n        const keepIds = new Set([...outputIds, ...inputIds, ...this.weightIds]);\n        Object.keys(tensorMap).forEach(key => {\n            const tensorArray = tensorMap[key];\n            tensorArray.forEach(tensor => {\n                if (tensor && !tensor.kept && !tensor.isDisposed &&\n                    !keepIds.has(tensor.id)) {\n                    tensor.dispose();\n                }\n            });\n        });\n        // dispose the context for the root executor\n        if (this.parent == null) {\n            context.dispose(keepIds);\n        }\n        return results;\n    }\n    async executeFunctionAsync(inputs, tensorArrayMap, tensorListMap) {\n        const mappedInputs = inputs.reduce((map, tensor, index) => {\n            map[this.inputs[index].name] = tensor;\n            return map;\n        }, {});\n        return this._executeAsync(mappedInputs, this.outputNodes, true, tensorArrayMap, tensorListMap);\n    }\n    /**\n     * When there are control flow nodes in the graph, the graph execution use\n     * ExecutionContext to keep track of the frames and loop iterators.\n     * @param inputs placeholder tensors for the graph.\n     * @param context the execution context object for current execution.\n     * @param outputNames Optional. output node name from the Tensorflow model,\n     * if no outputs are specified, the default outputs of the model would be\n     * used. You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     * @param isFunctionExecution Flag for executing a function.\n     */\n    async executeWithControlFlow(inputs, context, outputNames, isFunctionExecution) {\n        const names = Object.keys(inputs);\n        const inputNodes = names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n        const outputNodeNames = outputNames.map(name => parseNodeName(name)[0]);\n        let outputNodes = outputNodeNames.map(name => this.graph.nodes[name]);\n        // If no outputs are specified, then use the default outputs of the model.\n        if (outputNodes.length === 0) {\n            outputNodes = this._outputs;\n        }\n        const { usedNodes, missingInputs, dynamicNode, syncInputs } = getExecutionSubgraph(inputs, outputNodes, this.weightMap, this._initNodes);\n        // First nodes to execute include inputNodes, weights, and initNodes.\n        const stack = [\n            ...inputNodes, ...this.graph.weights, ...(this._initNodes || [])\n        ].map(node => {\n            return { node, contexts: context.currentContext };\n        });\n        const tensorsMap = Object.assign({}, this.weightMap);\n        Object.keys(inputs).forEach(name => {\n            const [nodeName, index] = parseNodeName(name);\n            const tensors = [];\n            tensors[index] = inputs[name];\n            tensorsMap[nodeName] = tensors;\n        });\n        const intermediateTensorConsumerCount = {};\n        const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n        const added = {};\n        while (stack.length > 0) {\n            const promises = this.processStack(inputNodes, stack, context, tensorsMap, added, tensorsToKeep, outputNodeNames, intermediateTensorConsumerCount, usedNodes);\n            await Promise.all(promises);\n        }\n        if (dynamicNode == null && !isFunctionExecution) {\n            console.warn(`This model execution did not contain any nodes with control flow ` +\n                `or dynamic output shapes. You can use model.execute() instead.`);\n        }\n        const missingOutputs = outputNodes\n            .filter(node => !isControlFlow(node) &&\n            !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n        if (missingOutputs.length > 0) {\n            let alternativeMsg = '';\n            if (dynamicNode != null) {\n                alternativeMsg =\n                    `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n                        `and specify the inputs [${syncInputs}]`;\n            }\n            throw new Error(`Cannot compute the outputs [${missingOutputs}] from the provided ` +\n                `inputs [${names}]. Consider providing the following inputs: ` +\n                `[${missingInputs}]. ${alternativeMsg}`);\n        }\n        return tensorsMap;\n    }\n    processStack(inputNodes, stack, context, tensorMap, added, tensorsToKeep, outputNames, intermediateTensorConsumerCount, usedNodes) {\n        const promises = [];\n        while (stack.length > 0) {\n            const item = stack.pop();\n            context.currentContext = item.contexts;\n            let nodeName = '';\n            // The tensor of the Enter op with isConstant set should be set\n            // in the parent scope, so it will be available as constant for the\n            // whole loop.\n            if (item.node.op === 'Enter' &&\n                getParamValue('isConstant', item.node, tensorMap, context)) {\n                [nodeName] = getNodeNameAndIndex(item.node.name, context);\n            }\n            // only process nodes that are not in the tensorMap yet, this include\n            // inputNodes and internal initNodes.\n            if (tensorMap[item.node.name] == null) {\n                const tensors = executeOp(item.node, tensorMap, context, this._resourceManager);\n                if (!nodeName) {\n                    [nodeName] = getNodeNameAndIndex(item.node.name, context);\n                }\n                const currentContext = context.currentContext;\n                if (util.isPromise(tensors)) {\n                    promises.push(tensors.then(t => {\n                        tensorMap[nodeName] = t;\n                        context.currentContext = currentContext;\n                        this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n                        this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                        return t;\n                    }));\n                }\n                else {\n                    tensorMap[nodeName] = tensors;\n                    this.checkTensorForDisposal(nodeName, item.node, tensorMap, context, tensorsToKeep, outputNames, intermediateTensorConsumerCount);\n                    this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n                }\n            }\n            else {\n                this.processChildNodes(item.node, stack, context, tensorMap, added, usedNodes);\n            }\n        }\n        return promises;\n    }\n    processChildNodes(node, stack, context, tensorMap, added, usedNodes) {\n        node.children.forEach((childNode) => {\n            const [nodeName,] = getNodeNameAndIndex(childNode.name, context);\n            if (added[nodeName] || !usedNodes.has(childNode.name)) {\n                return;\n            }\n            // Merge op can be pushed if any of its inputs has value.\n            if (childNode.op === 'Merge') {\n                if (childNode.inputNames.some(name => {\n                    return !!getTensor(name, tensorMap, context);\n                })) {\n                    added[nodeName] = true;\n                    stack.push({ contexts: context.currentContext, node: childNode });\n                }\n            }\n            else // Otherwise all inputs must to have value.\n             if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n            })) {\n                added[nodeName] = true;\n                stack.push({ contexts: context.currentContext, node: childNode });\n            }\n        });\n    }\n    /**\n     * Releases the memory used by the weight tensors.\n     */\n    dispose() {\n        Object.keys(this.weightMap)\n            .forEach(key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n    }\n    checkInputShapeAndType(inputs) {\n        Object.keys(inputs).forEach(name => {\n            const input = inputs[name];\n            const [nodeName,] = parseNodeName(name);\n            const node = this.graph.nodes[nodeName];\n            if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n                const shape = node.attrParams['shape'].value;\n                const match = shape.length === input.shape.length &&\n                    input.shape.every((dim, index) => shape[index] === -1 || shape[index] === dim);\n                util.assert(match, () => `The shape of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be [${shape}], but was ` +\n                    `[${input.shape}]`);\n            }\n            if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n                util.assert(input.dtype === node.attrParams['dtype'].value, () => `The dtype of dict['${node.name}'] provided in ` +\n                    `model.execute(dict) must be ` +\n                    `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n            }\n        });\n    }\n    mapInputs(inputs) {\n        const result = {};\n        for (const inputName in inputs) {\n            if (this._signature != null && this._signature.inputs != null &&\n                this._signature.inputs[inputName] != null) {\n                const tensor = this._signature.inputs[inputName];\n                result[tensor.name] = inputs[inputName];\n            }\n            else {\n                result[inputName] = inputs[inputName];\n            }\n        }\n        return result;\n    }\n    checkInputs(inputs) {\n        const notInGraph = Object.keys(inputs).filter(name => {\n            const [nodeName] = parseNodeName(name);\n            return this.graph.nodes[nodeName] == null;\n        });\n        if (notInGraph.length > 0) {\n            throw new Error(`The dict provided in model.execute(dict) has ` +\n                `keys: [${notInGraph}] that are not part of graph`);\n        }\n    }\n    mapOutputs(outputs) {\n        return outputs.map(name => {\n            if (this._signature != null && this._signature.outputs != null &&\n                this._signature.outputs[name] != null) {\n                const tensor = this._signature.outputs[name];\n                return tensor.name;\n            }\n            return name;\n        }, {});\n    }\n    checkOutputs(outputs) {\n        outputs.forEach(name => {\n            const [normalizedName] = parseNodeName(name);\n            if (!this.graph.nodes[normalizedName]) {\n                throw new Error(`The output '${name}' is not found in the graph`);\n            }\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQTs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ2Esd0JBQXdDLEVBQUUsRUFDMUMsZUFBNkIsRUFBRTtRQUQvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFCO1FBQzFDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtJQUFHLENBQUM7SUFFaEQ7Ozs7Ozs7O09BUUc7SUFDSCxZQUFZLENBQUMsSUFBWSxFQUFFLFNBQW9CO1FBQzdDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdCQUF3QixDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLEVBQVU7UUFDekIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge0hhc2hUYWJsZU1hcCwgTmFtZWRUZW5zb3JNYXB9IGZyb20gJy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4vaGFzaF90YWJsZSc7XG5cbi8qKlxuICogQ29udGFpbnMgZ2xvYmFsIHJlc291cmNlcyBvZiBhIG1vZGVsLlxuICovXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBoYXNoVGFibGVOYW1lVG9IYW5kbGU6IE5hbWVkVGVuc29yTWFwID0ge30sXG4gICAgICByZWFkb25seSBoYXNoVGFibGVNYXA6IEhhc2hUYWJsZU1hcCA9IHt9KSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGBIYXNoVGFibGVgIGluIHRoZSByZXNvdXJjZSBtYW5hZ2VyLlxuICAgKlxuICAgKiBUaGUgYEhhc2hUYWJsZWAgY2FuIGJlIHJldHJpZXZlZCBieSBgcmVzb3VyY2VNYW5hZ2VyLmdldEhhc2hUYWJsZUJ5SWRgLFxuICAgKiB3aGVyZSBpZCBpcyB0aGUgdGFibGUgaGFuZGxlIHRlbnNvcidzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC5cbiAgICogQHBhcmFtIGhhc2hUYWJsZSBUaGUgYEhhc2hUYWJsZWAgdG8gYmUgYWRkZWQgdG8gcmVzb3VyY2UgbWFuYWdlci5cbiAgICovXG4gIGFkZEhhc2hUYWJsZShuYW1lOiBzdHJpbmcsIGhhc2hUYWJsZTogSGFzaFRhYmxlKSB7XG4gICAgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV0gPSBoYXNoVGFibGUuaGFuZGxlO1xuICAgIHRoaXMuaGFzaFRhYmxlTWFwW2hhc2hUYWJsZS5pZF0gPSBoYXNoVGFibGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB0YWJsZSBoYW5kbGUgYnkgbm9kZSBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC4gVGhpcyBuYW1lIGlzIGFsc29cbiAgICogICAgIHVzZWQgaW4gdGhlIGlucHV0cyBsaXN0IG9mIGxvb2t1cCBhbmQgaW1wb3J0IGBIYXNoVGFibGVgIG9wcy5cbiAgICovXG4gIGdldEhhc2hUYWJsZUhhbmRsZUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3R1YWwgYEhhc2hUYWJsZWAgYnkgaXRzIGhhbmRsZSB0ZW5zb3IncyBpZC5cbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgaGFuZGxlIHRlbnNvci5cbiAgICovXG4gIGdldEhhc2hUYWJsZUJ5SWQoaWQ6IG51bWJlcik6IEhhc2hUYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaFRhYmxlTWFwW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIGBSZXNvdXJjZU1hbmFnZXJgLCBpbmNsdWRpbmcgaXRzIGhhc2hUYWJsZXMgYW5kIHRlbnNvcnMgaW4gdGhlbS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5oYXNoVGFibGVNYXApIHtcbiAgICAgIHRoaXMuaGFzaFRhYmxlTWFwW2tleV0uY2xlYXJBbmRDbG9zZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaGFzaFRhYmxlTWFwW2tleV07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuaGFzaFRhYmxlTmFtZVRvSGFuZGxlKSB7XG4gICAgICB0aGlzLmhhc2hUYWJsZU5hbWVUb0hhbmRsZVtuYW1lXS5kaXNwb3NlKCk7XG4gICAgICBkZWxldGUgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gICAgfVxuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { io, Tensor } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel {\n    /**\n     * @param modelUrl url for the model, or an `io.IOHandler`.\n     * @param weightManifestUrl url for the weight file generated by\n     * scripts/convert.py script.\n     * @param requestOption options for Request, which allows to send credentials\n     * and custom headers.\n     * @param onProgress Optional, progress callback function, fired periodically\n     * before the load is completed.\n     */\n    constructor(modelUrl, loadOptions = {}) {\n        this.modelUrl = modelUrl;\n        this.loadOptions = loadOptions;\n        this.version = 'n/a';\n        if (loadOptions == null) {\n            this.loadOptions = {};\n        }\n        this.resourceManager = new ResourceManager();\n    }\n    // Returns the version information for the tensorflow model GraphDef.\n    get modelVersion() {\n        return this.version;\n    }\n    get inputNodes() {\n        return this.executor.inputNodes;\n    }\n    get outputNodes() {\n        return this.executor.outputNodes;\n    }\n    get inputs() {\n        return this.executor.inputs;\n    }\n    get outputs() {\n        return this.executor.outputs;\n    }\n    get weights() {\n        return this.executor.weightMap;\n    }\n    get metadata() {\n        return this.artifacts.userDefinedMetadata;\n    }\n    get modelSignature() {\n        return this.signature;\n    }\n    findIOHandler() {\n        const path = this.modelUrl;\n        if (path.load != null) {\n            // Path is an IO Handler.\n            this.handler = path;\n        }\n        else if (this.loadOptions.requestInit != null) {\n            this.handler = io.browserHTTPRequest(path, this.loadOptions);\n        }\n        else {\n            const handlers = io.getLoadHandlers(path, this.loadOptions);\n            if (handlers.length === 0) {\n                // For backward compatibility: if no load handler can be found,\n                // assume it is a relative http path.\n                handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) load handlers for ` +\n                    `URL '${[path]}'`);\n            }\n            this.handler = handlers[0];\n        }\n    }\n    /**\n     * Loads the model and weight files, construct the in memory weight map and\n     * compile the inference graph.\n     */\n    async load() {\n        this.findIOHandler();\n        if (this.handler.load == null) {\n            throw new Error('Cannot proceed with model loading because the IOHandler provided ' +\n                'does not have the `load` method implemented.');\n        }\n        const artifacts = await this.handler.load();\n        return this.loadSync(artifacts);\n    }\n    /**\n     * Synchronously construct the in memory weight map and\n     * compile the inference graph. Also initialize hashtable if any.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    loadSync(artifacts) {\n        this.artifacts = artifacts;\n        const graph = this.artifacts.modelTopology;\n        let signature;\n        if (this.artifacts.userDefinedMetadata != null &&\n            this.artifacts.userDefinedMetadata.signature != null) {\n            signature = // tslint:disable-next-line:no-any\n                this.artifacts.userDefinedMetadata.signature;\n        }\n        else {\n            signature = this.artifacts.signature;\n        }\n        this.signature = signature;\n        this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n        const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n        this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n        this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n        // Attach a model-level resourceManager to each executor to share resources,\n        // such as `HashTable`.\n        this.executor.resourceManager = this.resourceManager;\n        if (artifacts.modelInitializer != null &&\n            artifacts.modelInitializer.node != null) {\n            const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n            this.initializer = new GraphExecutor(initializer);\n            this.initializer.weightMap = this.executor.weightMap;\n            // Attach a model-level resourceManager to the initializer, the\n            // hashTables created from when executing the initializer will be stored\n            // in the resourceManager.\n            this.initializer.resourceManager = this.resourceManager;\n            this.initializer.executeAsync({}, []);\n        }\n        return true;\n    }\n    /**\n     * Save the configuration and/or weights of the GraphModel.\n     *\n     * An `IOHandler` is an object that has a `save` method of the proper\n     * signature defined. The `save` method manages the storing or\n     * transmission of serialized data (\"artifacts\") that represent the\n     * model's topology and weights onto or via a specific medium, such as\n     * file downloads, local storage, IndexedDB in the web browser and HTTP\n     * requests to a server. TensorFlow.js provides `IOHandler`\n     * implementations for a number of frequently used saving mediums, such as\n     * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n     * for more details.\n     *\n     * This method also allows you to refer to certain types of `IOHandler`s\n     * as URL-like string shortcuts, such as 'localstorage://' and\n     * 'indexeddb://'.\n     *\n     * Example 1: Save `model`'s topology and weights to browser [local\n     * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n     * then load it back.\n     *\n     * ```js\n     * const modelUrl =\n     *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n     * const model = await tf.loadGraphModel(modelUrl);\n     * const zeros = tf.zeros([1, 224, 224, 3]);\n     * model.predict(zeros).print();\n     *\n     * const saveResults = await model.save('localstorage://my-model-1');\n     *\n     * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n     * console.log('Prediction from loaded model:');\n     * model.predict(zeros).print();\n     * ```\n     *\n     * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n     * scheme-based string shortcut for `IOHandler`.\n     * @param config Options for saving the model.\n     * @returns A `Promise` of `SaveResult`, which summarizes the result of\n     * the saving, such as byte sizes of the saved artifacts for the model's\n     *   topology and weight values.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n     */\n    async save(handlerOrURL, config) {\n        if (typeof handlerOrURL === 'string') {\n            const handlers = io.getSaveHandlers(handlerOrURL);\n            if (handlers.length === 0) {\n                throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n            }\n            else if (handlers.length > 1) {\n                throw new Error(`Found more than one (${handlers.length}) save handlers for ` +\n                    `URL '${handlerOrURL}'`);\n            }\n            handlerOrURL = handlers[0];\n        }\n        if (handlerOrURL.save == null) {\n            throw new Error('GraphModel.save() cannot proceed because the IOHandler ' +\n                'provided does not have the `save` attribute defined.');\n        }\n        return handlerOrURL.save(this.artifacts);\n    }\n    /**\n     * Execute the inference for the input tensors.\n     *\n     * @param input The input tensors, when there is single input for the model,\n     * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n     * inputs params should be in either `tf.Tensor`[] if the input order is\n     * fixed, or otherwise NamedTensorMap format.\n     *\n     * For model with multiple inputs, we recommend you use NamedTensorMap as the\n     * input type, if you use `tf.Tensor`[], the order of the array needs to\n     * follow the\n     * order of inputNodes array. @see {@link GraphModel.inputNodes}\n     *\n     * You can also feed any intermediate nodes using the NamedTensorMap as the\n     * input type. For example, given the graph\n     *    InputNode => Intermediate => OutputNode,\n     * you can execute the subgraph Intermediate => OutputNode by calling\n     *    model.execute('IntermediateNode' : tf.tensor(...));\n     *\n     * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n     * state needs to be fed manually.\n     *\n     * For batch inference execution, the tensors for each input need to be\n     * concatenated together. For example with mobilenet, the required input shape\n     * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n     * If we are provide a batched data of 100 images, the input tensor should be\n     * in the shape of [100, 244, 244, 3].\n     *\n     * @param config Prediction configuration for specifying the batch size and\n     * output node names. Currently the batch size option is ignored for graph\n     * model.\n     *\n     * @returns Inference result tensors. The output would be single `tf.Tensor`\n     * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n     * will be returned for model with multiple outputs.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    predict(inputs, config) {\n        return this.execute(inputs, this.outputNodes);\n    }\n    normalizeInputs(inputs) {\n        if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n            // The input is already a NamedTensorMap.\n            return inputs;\n        }\n        inputs = Array.isArray(inputs) ? inputs : [inputs];\n        if (inputs.length !== this.inputNodes.length) {\n            throw new Error('Input tensor count mismatch,' +\n                `the graph model has ${this.inputNodes.length} placeholders, ` +\n                `while there are ${inputs.length} input tensors.`);\n        }\n        return this.inputNodes.reduce((map, inputName, i) => {\n            map[inputName] = inputs[i];\n            return map;\n        }, {});\n    }\n    normalizeOutputs(outputs) {\n        outputs = outputs || this.outputNodes;\n        return !Array.isArray(outputs) ? [outputs] : outputs;\n    }\n    /**\n     * Executes inference for the model for given input tensors.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the Tensorflow model, if no\n     * outputs are specified, the default outputs of the model would be used.\n     * You can inspect intermediate nodes of the model by adding them to the\n     * outputs array.\n     *\n     * @returns A single tensor if provided with a single output or no outputs\n     * are provided and there is only one default output, otherwise return a\n     * tensor array. The order of the tensor array is the same as the outputs\n     * if provided, otherwise the order of outputNodes attribute of the model.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    execute(inputs, outputs) {\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = this.executor.execute(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    /**\n     * Executes inference for the model for given input tensors in async\n     * fashion, use this method when your model contains control flow ops.\n     * @param inputs tensor, tensor array or tensor map of the inputs for the\n     * model, keyed by the input node names.\n     * @param outputs output node name from the Tensorflow model, if no outputs\n     * are specified, the default outputs of the model would be used. You can\n     * inspect intermediate nodes of the model by adding them to the outputs\n     * array.\n     *\n     * @returns A Promise of single tensor if provided with a single output or\n     * no outputs are provided and there is only one default output, otherwise\n     * return a tensor map.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    async executeAsync(inputs, outputs) {\n        inputs = this.normalizeInputs(inputs);\n        outputs = this.normalizeOutputs(outputs);\n        const result = await this.executor.executeAsync(inputs, outputs);\n        return result.length > 1 ? result : result[0];\n    }\n    convertTensorMapToTensorsMap(map) {\n        return Object.keys(map).reduce((newMap, key) => {\n            newMap[key] = [map[key]];\n            return newMap;\n        }, {});\n    }\n    /**\n     * Releases the memory used by the weight tensors and resourceManager.\n     *\n     * @doc {heading: 'Models', subheading: 'Classes'}\n     */\n    dispose() {\n        this.executor.dispose();\n        if (this.initializer) {\n            this.initializer.dispose();\n        }\n        this.resourceManager.dispose();\n    }\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(modelUrl, options = {}) {\n    if (modelUrl == null) {\n        throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n            'or an IOHandler that loads the model');\n    }\n    if (options == null) {\n        options = {};\n    }\n    if (options.fromTFHub) {\n        if (modelUrl.load == null) {\n            if (!modelUrl.endsWith('/')) {\n                modelUrl = modelUrl + '/';\n            }\n            modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n        }\n    }\n    const model = new GraphModel(modelUrl, options);\n    await model.load();\n    return model;\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["util.toNestedArray","json","tensorflow.DataType","executeOp","tfOps.add","tfOps.addN","tfOps.mod","tfOps.mul","tfOps.div","tfOps.divNoNan","tfOps.floorDiv","tfOps.sub","tfOps.minimum","tfOps.maximum","tfOps.pow","tfOps.squaredDifference","tfOps.abs","tfOps.acos","tfOps.acosh","tfOps.asin","tfOps.asinh","tfOps.atan","tfOps.atan2","tfOps.atanh","tfOps.ceil","tfOps.complex","tfOps.cos","tfOps.cosh","tfOps.elu","tfOps.erf","tfOps.exp","tfOps.expm1","tfOps.floor","tfOps.log","tfOps.log1p","tfOps.imag","tfOps.neg","tfOps.reciprocal","tfOps.real","tfOps.relu","tfOps.round","tfOps.selu","tfOps.sigmoid","tfOps.sin","tfOps.sign","tfOps.sinh","tfOps.softplus","tfOps.sqrt","tfOps.square","tfOps.tanh","tfOps.tan","tfOps.clipByValue","tfOps.relu6","tfOps.rsqrt","tfOps.prod","tfOps.leakyRelu","tfOps.prelu","tfOps.isNaN","util.assert","tfOps.conv1d","tfOps.conv2d","tfOps.fused.conv2d","tfOps.fused.depthwiseConv2d","tfOps.conv2dTranspose","tfOps.depthwiseConv2d","tfOps.conv3d","tfOps.avgPool","tfOps.maxPool","tfOps.maxPoolWithArgmax","tfOps.avgPool3d","tfOps.maxPool3d","tfOps.dilation2d","tfOps.fill","tfOps.linspace","tfOps.multinomial","tfOps.oneHot","tfOps.ones","tfOps.onesLike","tfOps.randomUniform","tfOps.range","tfOps.truncatedNormal","tfOps.zeros","tfOps.zerosLike","tfOps.image","tfOps.cast","tfOps.whereAsync","tfOps.setdiff1dAsync","tfOps.topk","tfOps.unique","tfOps.tensor1d","tfOps.scalar","tfOps.equal","tfOps.notEqual","tfOps.greater","tfOps.greaterEqual","tfOps.less","tfOps.lessEqual","tfOps.logicalAnd","tfOps.logicalNot","tfOps.logicalOr","tfOps.where","tfOps.matMul","tfOps.einsum","tfOps.transpose","tfOps.fused.matMul","tfOps.batchNorm","tfOps.localResponseNormalization","tfOps.softmax","tfOps.logSoftmax","tfOps.sparseToDense","tfOps.max","tfOps.mean","tfOps.min","tfOps.sum","tfOps.all","tfOps.any","tfOps.argMax","tfOps.argMin","tfOps.cumsum","tfOps.bincount","tfOps.denseBincount","tfOps.concat","tfOps.gather","tfOps.reverse","tfOps.slice","tfOps.stridedSlice","tfOps.squeeze","util.arraysEqual","tfOps.reshape","tfOps.stack","tfOps.unstack","tfOps.tile","tfOps.split","tfOps.scatterND","tfOps.gatherND","tfOps.sparse","tfOps.fft","tfOps.ifft","tfOps.rfft","tfOps.irfft","tfOps.string","tfOps.expandDims","tfOps.mirrorPad","tfOps.pad","tfOps.spaceToBatchND","tfOps.batchToSpaceND","tfOps.depthToSpace","tfOps.broadcastTo","tfOps.broadcastArgs","tfc.tidy","arithmetic.executeOp","basicMath.executeOp","control.executeOp","convolution.executeOp","creation.executeOp","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","sparse.executeOp","spectral.executeOp","string.executeOp","transformation.executeOp","hashTable.executeOp","tfc.util.isPromise","util.isPromise","io.browserHTTPRequest","io.getLoadHandlers","io.decodeWeights","io.getSaveHandlers"],"mappings":"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"}